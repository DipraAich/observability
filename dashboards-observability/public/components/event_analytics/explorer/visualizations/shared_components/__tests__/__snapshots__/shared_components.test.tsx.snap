// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Shared components Renders PlotlyEditorActionsMenu component 1`] = `
<PlotlyEditorActionsMenu
  formatHJson={[MockFunction]}
>
  <EuiPopover
    anchorPosition="downLeft"
    button={
      <EuiButtonIcon
        iconType="wrench"
        onClick={[Function]}
      />
    }
    closePopover={[Function]}
    display="inlineBlock"
    hasArrow={true}
    id="actionsMenu"
    isOpen={false}
    ownFocus={true}
    panelPaddingSize="none"
  >
    <div
      className="euiPopover euiPopover--anchorDownLeft"
      id="actionsMenu"
    >
      <div
        className="euiPopover__anchor"
      >
        <EuiButtonIcon
          iconType="wrench"
          onClick={[Function]}
        >
          <button
            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            <EuiIcon
              aria-hidden="true"
              className="euiButtonIcon__icon"
              color="inherit"
              size="m"
              type="wrench"
            >
              <EuiIconWrench
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                focusable="false"
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                  focusable="false"
                  height={16}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M6.918 9.746l4.537 4.537a2 2 0 102.828-2.829l-3.157-3.156a.5.5 0 01.708-.708l3.156 3.157a3 3 0 11-4.243 4.243l-4.949-4.95a5.001 5.001 0 01-5.22-7.106.5.5 0 01.805-.138L3.676 5.09a1 1 0 101.415-1.414L2.797 1.382a.5.5 0 01.138-.805 5.001 5.001 0 113.983 9.169zM1.226 4.054a4.002 4.002 0 006.693 3.865 4 4 0 00-3.865-6.693l1.744 1.743a2 2 0 11-2.829 2.828L1.226 4.054zm10.229 8.814a1 1 0 111.414-1.414 1 1 0 01-1.414 1.414z"
                  />
                </svg>
              </EuiIconWrench>
            </EuiIcon>
          </button>
        </EuiButtonIcon>
      </div>
    </div>
  </EuiPopover>
</PlotlyEditorActionsMenu>
`;

exports[`Shared components Renders PlotlyVizEditor component 1`] = `
<PlotlyVizEditor
  props={
    Object {
      "onVizConfigChange": [MockFunction],
      "setToast": [MockFunction],
      "spec": "",
    }
  }
>
  <div
    className="vgaEditor"
  >
    <EuiCodeEditor
      data-test-subj="vega-editor"
      height="auto"
      isReadOnly={false}
      mode="hjson"
      onChange={[Function]}
      setOptions={
        Object {
          "highlightActiveLine": false,
          "maxLines": Infinity,
          "showPrintMargin": false,
          "tabSize": 2,
          "useSoftTabs": true,
          "wrap": true,
        }
      }
      theme="textmate"
      width="100%"
    >
      <div
        className="euiCodeEditorWrapper"
        data-test-subj="vega-editor"
        style={
          Object {
            "height": "auto",
            "width": "100%",
          }
        }
      >
        <button
          className="euiCodeEditorKeyboardHint"
          data-test-subj="codeEditorHint"
          id="random_html_id"
          onClick={[Function]}
        >
          <p
            className="euiText"
          >
            <EuiI18n
              default="Press Enter to start editing."
              token="euiCodeEditor.startEditing"
            >
              Press Enter to start editing.
            </EuiI18n>
          </p>
          <p
            className="euiText"
          >
            <EuiI18n
              default="When you're done, press Escape to stop editing."
              token="euiCodeEditor.stopEditing"
            >
              When you're done, press Escape to stop editing.
            </EuiI18n>
          </p>
        </button>
        <ReactAce
          commands={
            Array [
              Object {
                "bindKey": Object {
                  "mac": "Esc",
                  "win": "Esc",
                },
                "exec": [Function],
                "name": "stopEditingOnEsc",
              },
            ]
          }
          cursorStart={1}
          editorProps={
            Object {
              "$blockScrolling": Infinity,
            }
          }
          enableBasicAutocompletion={false}
          enableLiveAutocompletion={false}
          enableSnippets={false}
          focus={false}
          fontSize={12}
          height="auto"
          highlightActiveLine={true}
          maxLines={null}
          minLines={null}
          mode="hjson"
          name="random_html_id"
          navigateToFileEnd={true}
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          onLoad={null}
          onPaste={null}
          onScroll={null}
          placeholder={null}
          readOnly={false}
          scrollMargin={
            Array [
              0,
              0,
              0,
              0,
            ]
          }
          setOptions={
            Object {
              "highlightActiveLine": false,
              "maxLines": Infinity,
              "showPrintMargin": false,
              "tabSize": 2,
              "useSoftTabs": true,
              "wrap": true,
            }
          }
          showGutter={true}
          showPrintMargin={true}
          style={Object {}}
          tabSize={4}
          theme="textmate"
          value=""
          width="100%"
          wrapEnabled={false}
        >
          <div
            id="random_html_id"
            style={
              Object {
                "height": "auto",
                "width": "100%",
              }
            }
          />
        </ReactAce>
      </div>
    </EuiCodeEditor>
    <div
      className="vgaEditor__aceEditorActions"
    >
      <PlotlyEditorActionsMenu
        formatHJson={[Function]}
      >
        <EuiPopover
          anchorPosition="downLeft"
          button={
            <EuiButtonIcon
              iconType="wrench"
              onClick={[Function]}
            />
          }
          closePopover={[Function]}
          display="inlineBlock"
          hasArrow={true}
          id="actionsMenu"
          isOpen={false}
          ownFocus={true}
          panelPaddingSize="none"
        >
          <div
            className="euiPopover euiPopover--anchorDownLeft"
            id="actionsMenu"
          >
            <div
              className="euiPopover__anchor"
            >
              <EuiButtonIcon
                iconType="wrench"
                onClick={[Function]}
              >
                <button
                  className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  <EuiIcon
                    aria-hidden="true"
                    className="euiButtonIcon__icon"
                    color="inherit"
                    size="m"
                    type="wrench"
                  >
                    <EuiIconEmpty
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      />
                    </EuiIconEmpty>
                  </EuiIcon>
                </button>
              </EuiButtonIcon>
            </div>
          </div>
        </EuiPopover>
      </PlotlyEditorActionsMenu>
    </div>
  </div>
</PlotlyVizEditor>
`;

exports[`Shared components Renders empty placeholder component 1`] = `
<EmptyPlaceholder
  icon={[Function]}
>
  <EuiText
    className="lnsChart__empty"
    color="subdued"
    data-test-subj="vizWorkspace__noData"
    size="xs"
    textAlign="center"
  >
    <div
      className="euiText euiText--extraSmall lnsChart__empty"
      data-test-subj="vizWorkspace__noData"
    >
      <EuiTextAlign
        textAlign="center"
      >
        <div
          className="euiTextAlign euiTextAlign--center"
        >
          <EuiTextColor
            color="subdued"
            component="div"
          >
            <div
              className="euiTextColor euiTextColor--subdued"
            >
              <EuiIcon
                color="subdued"
                size="xxl"
                type={[Function]}
              >
                <LensIconChartBar
                  aria-hidden={true}
                  className="euiIcon euiIcon--xxLarge euiIcon--subdued"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--xxLarge euiIcon--subdued"
                    fill="none"
                    focusable="false"
                    height={22}
                    role="img"
                    style={null}
                    viewBox="0 0 30 22"
                    width={30}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      className="lensChartIcon__subdued"
                      d="M5 7a1 1 0 011 1v13a1 1 0 01-1 1H1a1 1 0 01-1-1V8a1 1 0 011-1h4zm16-7a1 1 0 011 1v20a1 1 0 01-1 1h-4a1 1 0 01-1-1V1a1 1 0 011-1h4z"
                    />
                    <path
                      className="lensChartIcon__accent"
                      d="M13 11a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1v-9a1 1 0 011-1h4zm16-7a1 1 0 011 1v16a1 1 0 01-1 1h-4a1 1 0 01-1-1V5a1 1 0 011-1h4z"
                    />
                  </svg>
                </LensIconChartBar>
              </EuiIcon>
              <EuiSpacer
                size="l"
              >
                <div
                  className="euiSpacer euiSpacer--l"
                />
              </EuiSpacer>
              <p>
                <FormattedMessage
                  defaultMessage="No results found"
                  id="visualization_noData"
                  values={Object {}}
                >
                  <span>
                    No results found
                  </span>
                </FormattedMessage>
              </p>
            </div>
          </EuiTextColor>
        </div>
      </EuiTextAlign>
    </div>
  </EuiText>
</EmptyPlaceholder>
`;

exports[`Shared components Renders tool bar button component 1`] = `
<ToolbarButton
  fontWeight="bold"
  onClick={[MockFunction]}
>
  <EuiButton
    className="lnsToolbarButton lnsToolbarButton--bold lnsToolbarButton--s"
    color="text"
    contentProps={
      Object {
        "className": "lnsToolbarButton__content",
      }
    }
    data-test-subj=""
    iconSide="right"
    iconType="arrowDown"
    onClick={[MockFunction]}
    size="s"
    textProps={
      Object {
        "className": "lnsToolbarButton__text",
      }
    }
  >
    <EuiButtonDisplay
      baseClassName="euiButton"
      className="lnsToolbarButton lnsToolbarButton--bold lnsToolbarButton--s"
      color="text"
      contentProps={
        Object {
          "className": "lnsToolbarButton__content",
        }
      }
      data-test-subj=""
      disabled={false}
      element="button"
      iconSide="right"
      iconType="arrowDown"
      isDisabled={false}
      onClick={[MockFunction]}
      size="s"
      textProps={
        Object {
          "className": "lnsToolbarButton__text",
        }
      }
      type="button"
    >
      <button
        className="euiButton euiButton--text euiButton--small lnsToolbarButton lnsToolbarButton--bold lnsToolbarButton--s"
        data-test-subj=""
        disabled={false}
        onClick={[MockFunction]}
        style={
          Object {
            "minWidth": undefined,
          }
        }
        type="button"
      >
        <EuiButtonContent
          className="euiButton__content lnsToolbarButton__content"
          iconSide="right"
          iconType="arrowDown"
          textProps={
            Object {
              "className": "euiButton__text lnsToolbarButton__text",
            }
          }
        >
          <span
            className="euiButtonContent euiButtonContent--iconRight euiButton__content lnsToolbarButton__content"
          >
            <EuiIcon
              className="euiButtonContent__icon"
              color="inherit"
              size="m"
              type="arrowDown"
            >
              <EuiIconEmpty
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                focusable="false"
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                  focusable="false"
                  height={16}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                />
              </EuiIconEmpty>
            </EuiIcon>
            <span
              className="euiButton__text lnsToolbarButton__text"
            >
              <WrappedComponent>
                <div>
                  testing
                </div>
              </WrappedComponent>
            </span>
          </span>
        </EuiButtonContent>
      </button>
    </EuiButtonDisplay>
  </EuiButton>
</ToolbarButton>
`;
