// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataConfigPanelItem component Renders DataConfigPanelItem component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <DataConfigPanelItem
    fieldOptionList={
      Array [
        Object {
          "label": "agent",
          "name": "agent",
          "type": "string",
        },
        Object {
          "label": "bytes",
          "name": "bytes",
          "type": "long",
        },
      ]
    }
    queryManager={QueryManager {}}
    visualizations={
      Object {
        "data": Object {
          "appData": Object {
            "fromApp": false,
          },
          "defaultAxes": Object {},
          "indexFields": Object {
            "availableFields": Array [
              Object {
                "name": "agent",
                "type": "string",
              },
              Object {
                "name": "bytes",
                "type": "long",
              },
              Object {
                "name": "clientip",
                "type": "ip",
              },
              Object {
                "name": "event",
                "type": "struct",
              },
              Object {
                "name": "extension",
                "type": "string",
              },
              Object {
                "name": "geo",
                "type": "struct",
              },
              Object {
                "name": "host",
                "type": "string",
              },
              Object {
                "name": "index",
                "type": "string",
              },
              Object {
                "name": "ip",
                "type": "ip",
              },
              Object {
                "name": "machine",
                "type": "struct",
              },
              Object {
                "name": "memory",
                "type": "double",
              },
              Object {
                "name": "message",
                "type": "string",
              },
              Object {
                "name": "phpmemory",
                "type": "long",
              },
              Object {
                "name": "referer",
                "type": "string",
              },
              Object {
                "name": "request",
                "type": "string",
              },
              Object {
                "name": "response",
                "type": "string",
              },
              Object {
                "name": "tags",
                "type": "string",
              },
              Object {
                "name": "timestamp",
                "type": "timestamp",
              },
              Object {
                "name": "url",
                "type": "string",
              },
              Object {
                "name": "utc_time",
                "type": "timestamp",
              },
            ],
            "queriedFields": Array [
              Object {
                "name": "double_per_ip_bytes",
                "type": "long",
              },
              Object {
                "name": "host",
                "type": "text",
              },
              Object {
                "name": "ip_count",
                "type": "integer",
              },
              Object {
                "name": "per_ip_bytes",
                "type": "long",
              },
              Object {
                "name": "resp_code",
                "type": "text",
              },
              Object {
                "name": "sum_bytes",
                "type": "long",
              },
            ],
            "selectedFields": Array [],
            "unselectedFields": Array [],
          },
          "query": Object {
            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2021-12-31 18:30:00' and timestamp <= '2022-11-17 06:37:08' | where match(request,'filebeat')",
            "index": "",
            "isLoaded": true,
            "objectType": "savedQuery",
            "rawQuery": "source = opensearch_dashboards_sample_data_logs | where match(request,'filebeat')",
            "savedObjectId": "MM0qHYMBVusSGvW09eu2",
            "selectedDateRange": Array [
              "now/y",
              "now",
            ],
            "selectedTimestamp": "timestamp",
            "tabCreatedType": "redirect_tab",
          },
          "rawVizData": Object {
            "data": Object {
              "count()": Array [
                154,
                1753,
                116,
                468,
                1964,
                219,
              ],
              "tags": Array [
                "error",
                "info",
                "login",
                "security",
                "success",
                "warning",
              ],
            },
            "jsonData": Array [
              Object {
                "count()": 154,
                "tags": "error",
              },
              Object {
                "count()": 1753,
                "tags": "info",
              },
              Object {
                "count()": 116,
                "tags": "login",
              },
              Object {
                "count()": 468,
                "tags": "security",
              },
              Object {
                "count()": 1964,
                "tags": "success",
              },
              Object {
                "count()": 219,
                "tags": "warning",
              },
            ],
            "metadata": Object {
              "fields": Array [
                Object {
                  "name": "count()",
                  "type": "integer",
                },
                Object {
                  "name": "tags",
                  "type": "text",
                },
                Object {
                  "name": "timestamp",
                  "type": "timestamp",
                },
              ],
              "size": 6,
              "status": 200,
            },
          },
          "userConfigs": Object {
            "dataConfig": Object {
              "dimensions": Array [
                Object {
                  "label": "tags",
                  "name": "tags",
                  "type": "text",
                },
              ],
              "metrics": Array [
                Object {
                  "label": "count()",
                  "name": "count()",
                  "side": "left",
                  "type": "integer",
                },
              ],
              "series": Array [
                Object {
                  "aggregation": "sum",
                  "customLabel": "delays",
                  "label": "FlightDelayMin",
                  "name": "FlightDelayMin",
                },
              ],
            },
          },
        },
        "vis": Object {
          "barwidth": 0.97,
          "category": "Visualizations",
          "categoryaxis": "xaxis",
          "component": [Function],
          "editorconfig": Object {
            "panelTabs": Array [
              Object {
                "editor": [Function],
                "id": "data-panel",
                "mapTo": "dataConfig",
                "name": "Style",
                "sections": Array [
                  Object {
                    "editor": [Function],
                    "id": "tooltip_options",
                    "mapTo": "tooltipOptions",
                    "name": "Tooltip options",
                    "schemas": Array [
                      Object {
                        "component": null,
                        "mapTo": "tooltipMode",
                        "name": "Tooltip mode",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                            Object {
                              "id": "hidden",
                              "name": "Hidden",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": null,
                        "mapTo": "tooltipText",
                        "name": "Tooltip text",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "all",
                              "name": "All",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "all",
                              "name": "All",
                            },
                            Object {
                              "id": "x",
                              "name": "Dimension",
                            },
                            Object {
                              "id": "y",
                              "name": "Series",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "editor": [Function],
                    "id": "legend",
                    "mapTo": "legend",
                    "name": "Legend",
                    "schemas": Array [
                      Object {
                        "component": null,
                        "mapTo": "showLegend",
                        "name": "Show legend",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                            Object {
                              "id": "hidden",
                              "name": "Hidden",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": null,
                        "mapTo": "position",
                        "name": "Position",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "v",
                              "name": "Right",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "v",
                              "name": "Right",
                            },
                            Object {
                              "id": "h",
                              "name": "Bottom",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": [Function],
                        "eleType": "input",
                        "mapTo": "legendSize",
                        "name": "Legend size",
                        "title": "Legend size",
                      },
                    ],
                  },
                  Object {
                    "editor": [Function],
                    "id": "chart_styles",
                    "mapTo": "chartStyles",
                    "name": "Chart styles",
                    "schemas": Array [
                      Object {
                        "component": [Function],
                        "eleType": "buttons",
                        "mapTo": "mode",
                        "name": "Mode",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "group",
                              "name": "Group",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "group",
                              "name": "Group",
                            },
                            Object {
                              "id": "stack",
                              "name": "Stack",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": [Function],
                        "eleType": "input",
                        "mapTo": "labelSize",
                        "name": "Label size",
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 0,
                        "eleType": "slider",
                        "mapTo": "rotateBarLabels",
                        "name": "Rotate bar labels",
                        "props": Object {
                          "max": 90,
                          "min": -90,
                          "showTicks": true,
                          "ticks": Array [
                            Object {
                              "label": "-90°",
                              "value": -90,
                            },
                            Object {
                              "label": "-45°",
                              "value": -45,
                            },
                            Object {
                              "label": "0°",
                              "value": 0,
                            },
                            Object {
                              "label": "45°",
                              "value": 45,
                            },
                            Object {
                              "label": "90°",
                              "value": 90,
                            },
                          ],
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 0.7,
                        "eleType": "slider",
                        "mapTo": "groupWidth",
                        "name": "Group width",
                        "props": Object {
                          "max": 1,
                          "step": 0.01,
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 0.97,
                        "eleType": "slider",
                        "mapTo": "barWidth",
                        "name": "Bar width",
                        "props": Object {
                          "max": 1,
                          "step": 0.01,
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 2,
                        "eleType": "slider",
                        "mapTo": "lineWidth",
                        "name": "Line width",
                        "props": Object {
                          "max": 10,
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 70,
                        "eleType": "slider",
                        "mapTo": "fillOpacity",
                        "name": "Fill opacity",
                        "props": Object {
                          "max": 100,
                        },
                      },
                    ],
                  },
                  Object {
                    "editor": [Function],
                    "id": "color-theme",
                    "mapTo": "colorTheme",
                    "name": "Color theme",
                    "schemas": Array [],
                  },
                ],
              },
              Object {
                "editor": [Function],
                "id": "availability-panel",
                "mapTo": "availabilityConfig",
                "name": "Availability",
              },
            ],
          },
          "fillopacity": 70,
          "fulllabel": "Vertical bar",
          "groupwidth": 0.7,
          "icon": [Function],
          "icontype": "visBarVerticalStacked",
          "id": "bar",
          "label": "Vertical bar",
          "labelangle": 0,
          "legendposition": "v",
          "linewidth": 2,
          "mode": "group",
          "name": "bar",
          "orientation": "v",
          "selection": Object {
            "dataLoss": "nothing",
          },
          "seriesaxis": "yaxis",
          "showlegend": "show",
          "type": "bar",
          "visconfig": Object {
            "config": Object {
              "displaylogo": false,
              "responsive": true,
            },
            "isUniColor": false,
            "layout": Object {
              "height": 1180,
              "legend": Object {
                "orientation": "v",
                "traceorder": "normal",
              },
              "margin": Object {
                "b": 30,
                "l": 60,
                "pad": 0,
                "r": 30,
                "t": 50,
              },
              "showlegend": true,
            },
          },
        },
      }
    }
  >
    <EuiTitle
      size="xxs"
    >
      <h3
        className="euiTitle euiTitle--xxsmall"
      >
        Configuration
      </h3>
    </EuiTitle>
    <EuiSpacer
      size="s"
    >
      <div
        className="euiSpacer euiSpacer--s"
      />
    </EuiSpacer>
    <div
      className="panel_section"
    >
      <div
        style={
          Object {
            "display": "flex",
          }
        }
      >
        <EuiTitle
          className="panel_title"
          size="xxs"
        >
          <h3
            className="euiTitle euiTitle--xxsmall panel_title"
          >
            series
          </h3>
        </EuiTitle>
        <EuiToolTip
          anchorClassName="eui-textTruncate"
          content="Series is an aggregation function (mandatory). The argument of an aggregation must be a field."
          delay="regular"
          position="right"
        >
          <span
            className="euiToolTipAnchor eui-textTruncate"
            onKeyUp={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <EuiIcon
              className="info-icon"
              color="text"
              onBlur={[Function]}
              onFocus={[Function]}
              size="m"
              type="iInCircle"
            >
              <EuiIconEmpty
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                focusable="false"
                onBlur={[Function]}
                onFocus={[Function]}
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                  focusable="false"
                  height={16}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                />
              </EuiIconEmpty>
            </EuiIcon>
          </span>
        </EuiToolTip>
      </div>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        paddingSize="s"
      >
        <div
          className="euiPanel euiPanel--paddingSmall euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            className="field_text"
            size="s"
          >
            <div
              className="euiText euiText--small field_text"
            >
              <EuiLink
                onClick={[Function]}
                role="button"
                tabIndex={0}
              >
                <button
                  className="euiLink euiLink--primary"
                  disabled={false}
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                  type="button"
                >
                  delays
                </button>
              </EuiLink>
            </div>
          </EuiText>
          <EuiToolTip
            anchorClassName="eui-textTruncate"
            content="Series is an aggregation function (mandatory). The argument of an aggregation must be a field."
            delay="regular"
            position="right"
          >
            <span
              className="euiToolTipAnchor eui-textTruncate"
              onKeyUp={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
            >
              <EuiButtonIcon
                aria-label="clear-field"
                color="subdued"
                iconSize="s"
                iconType="cross"
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
              >
                <button
                  aria-label="clear-field"
                  className="euiButtonIcon euiButtonIcon--subdued euiButtonIcon--empty euiButtonIcon--xSmall"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  type="button"
                >
                  <EuiIcon
                    aria-hidden="true"
                    className="euiButtonIcon__icon"
                    color="inherit"
                    size="s"
                    type="cross"
                  >
                    <EuiIconEmpty
                      aria-hidden={true}
                      className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      />
                    </EuiIconEmpty>
                  </EuiIcon>
                </button>
              </EuiButtonIcon>
            </span>
          </EuiToolTip>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        grow={true}
      >
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            size="s"
          >
            <div
              className="euiText euiText--small"
            >
              Click to add
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="add-field"
            color="primary"
            iconSize="s"
            iconType="plusInCircle"
            onClick={[Function]}
          >
            <button
              aria-label="add-field"
              className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="plusInCircle"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="m"
      >
        <div
          className="euiSpacer euiSpacer--m"
        />
      </EuiSpacer>
    </div>
    <EuiSpacer
      size="s"
    >
      <div
        className="euiSpacer euiSpacer--s"
      />
    </EuiSpacer>
    <div
      className="panel_section"
    >
      <div
        style={
          Object {
            "display": "flex",
          }
        }
      >
        <EuiTitle
          className="panel_title"
          size="xxs"
        >
          <h3
            className="euiTitle euiTitle--xxsmall panel_title"
          >
            dimensions
          </h3>
        </EuiTitle>
        <EuiToolTip
          anchorClassName="eui-textTruncate"
          content="Dimensions are 'by' clauses. They are fields or expressions like scalar and aggregation functions. Besides, the span clause for a dimension can be used to split a specific field into buckets in the same interval, the stats then does the aggregation by these span buckets."
          delay="regular"
          position="right"
        >
          <span
            className="euiToolTipAnchor eui-textTruncate"
            onKeyUp={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <EuiIcon
              className="info-icon"
              color="text"
              onBlur={[Function]}
              onFocus={[Function]}
              size="m"
              type="iInCircle"
            >
              <EuiIconEmpty
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                focusable="false"
                onBlur={[Function]}
                onFocus={[Function]}
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                  focusable="false"
                  height={16}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                />
              </EuiIconEmpty>
            </EuiIcon>
          </span>
        </EuiToolTip>
      </div>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        paddingSize="s"
      >
        <div
          className="euiPanel euiPanel--paddingSmall euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            className="field_text"
            size="s"
          >
            <div
              className="euiText euiText--small field_text"
            >
              <EuiLink
                onClick={[Function]}
                role="button"
                tabIndex={0}
              >
                <button
                  className="euiLink euiLink--primary"
                  disabled={false}
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                  type="button"
                >
                   tags
                </button>
              </EuiLink>
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="clear-field"
            color="subdued"
            iconSize="s"
            iconType="cross"
            onClick={[Function]}
          >
            <button
              aria-label="clear-field"
              className="euiButtonIcon euiButtonIcon--subdued euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="cross"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        grow={true}
      >
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            size="s"
          >
            <div
              className="euiText euiText--small"
            >
              Click to add
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="add-field"
            color="primary"
            iconSize="s"
            iconType="plusInCircle"
            onClick={[Function]}
          >
            <button
              aria-label="add-field"
              className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="plusInCircle"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="m"
      >
        <div
          className="euiSpacer euiSpacer--m"
        />
      </EuiSpacer>
    </div>
    <EuiSpacer
      size="s"
    >
      <div
        className="euiSpacer euiSpacer--s"
      />
    </EuiSpacer>
    <div
      className="panel_section"
    >
      <div
        style={
          Object {
            "display": "flex",
          }
        }
      >
        <EuiTitle
          className="panel_title"
          size="xxs"
        >
          <h3
            className="euiTitle euiTitle--xxsmall panel_title"
          >
            breakdowns
          </h3>
        </EuiTitle>
        <EuiToolTip
          anchorClassName="eui-textTruncate"
          content="Defines how each series is broken down. Breakdowns are 'by' clauses that subdivide the existing series."
          delay="regular"
          position="right"
        >
          <span
            className="euiToolTipAnchor eui-textTruncate"
            onKeyUp={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <EuiIcon
              className="info-icon"
              color="text"
              onBlur={[Function]}
              onFocus={[Function]}
              size="m"
              type="iInCircle"
            >
              <EuiIconEmpty
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                focusable="false"
                onBlur={[Function]}
                onFocus={[Function]}
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                  focusable="false"
                  height={16}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                />
              </EuiIconEmpty>
            </EuiIcon>
          </span>
        </EuiToolTip>
      </div>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        grow={true}
      >
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            size="s"
          >
            <div
              className="euiText euiText--small"
            >
              Click to add
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="add-field"
            color="primary"
            iconSize="s"
            iconType="plusInCircle"
            onClick={[Function]}
          >
            <button
              aria-label="add-field"
              className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="plusInCircle"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="m"
      >
        <div
          className="euiSpacer euiSpacer--m"
        />
      </EuiSpacer>
    </div>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <EuiFlexItem
      grow={false}
    >
      <div
        className="euiFlexItem euiFlexItem--flexGrowZero"
      >
        <EuiButton
          data-test-subj="visualizeEditorRenderButton"
          iconType="play"
          onClick={[Function]}
          size="s"
        >
          <EuiButtonDisplay
            baseClassName="euiButton"
            data-test-subj="visualizeEditorRenderButton"
            disabled={false}
            element="button"
            iconType="play"
            isDisabled={false}
            onClick={[Function]}
            size="s"
            type="button"
          >
            <button
              className="euiButton euiButton--primary euiButton--small"
              data-test-subj="visualizeEditorRenderButton"
              disabled={false}
              onClick={[Function]}
              style={
                Object {
                  "minWidth": undefined,
                }
              }
              type="button"
            >
              <EuiButtonContent
                className="euiButton__content"
                iconSide="left"
                iconType="play"
                textProps={
                  Object {
                    "className": "euiButton__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButton__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="play"
                  >
                    <EuiIconEmpty
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      />
                    </EuiIconEmpty>
                  </EuiIcon>
                  <span
                    className="euiButton__text"
                  >
                    Update chart
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonDisplay>
        </EuiButton>
      </div>
    </EuiFlexItem>
  </DataConfigPanelItem>
</Provider>
`;

exports[`Explorer component Renders Explorer component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Explorer
    curSelectedTabId={
      Object {
        "current": undefined,
      }
    }
    dslService={
      Object {
        "fetch": [MockFunction],
        "fetchFields": [MockFunction],
        "fetchIndices": [MockFunction],
        "http": [MockFunction],
      }
    }
    history={[MockFunction]}
    http={[MockFunction]}
    notifications={
      Object {
        "toasts": Object {
          "addError": [MockFunction],
        },
      }
    }
    pplService={
      Object {
        "fetch": [MockFunction],
        "http": [MockFunction],
      }
    }
    queryManager={QueryManager {}}
    savedObjectId="pomjQYQBg4Jf5lv0c5Ke"
    savedObjects={
      SavedObjects {
        "http": [MockFunction],
      }
    }
    setToast={[MockFunction]}
    tabId="pomjQYQBg4Jf5lv0c5Ke"
    timestampUtils={
      TimestampUtils {
        "dslService": Object {
          "fetch": [MockFunction],
          "fetchFields": [MockFunction],
          "fetchIndices": [MockFunction],
          "http": [MockFunction],
        },
      }
    }
  >
    <div
      className="dscAppContainer"
    >
      <Search
        baseQuery=""
        closeLiveTailPopover={[Function]}
        dslService={
          Object {
            "fetch": [MockFunction],
            "fetchFields": [MockFunction],
            "fetchIndices": [MockFunction],
            "http": [MockFunction],
          }
        }
        endTime="now"
        getSuggestions={[Function]}
        handleQueryChange={[Function]}
        handleQuerySearch={[Function]}
        handleSavingObject={[Function]}
        handleTimePickerChange={[Function]}
        handleTimeRangePickerRefresh={[Function]}
        isLiveTailOn={false}
        isLiveTailPopoverOpen={false}
        isPanelTextFieldInvalid={false}
        key="search-component"
        liveTailName="Live"
        onItemSelect={[Function]}
        popoverItems={
          Array [
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay5s"
              onClick={[Function]}
            >
              5s
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay10s"
              onClick={[Function]}
            >
              10s
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay30s"
              onClick={[Function]}
            >
              30s
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay1m"
              onClick={[Function]}
            >
              1m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay5m"
              onClick={[Function]}
            >
              5m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay15m"
              onClick={[Function]}
            >
              15m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay30m"
              onClick={[Function]}
            >
              30m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay1h"
              onClick={[Function]}
            >
              1h
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay2h"
              onClick={[Function]}
            >
              2h
            </EuiContextMenuItem>,
          ]
        }
        query=""
        savedObjects={
          SavedObjects {
            "http": [MockFunction],
          }
        }
        selectedCustomPanelOptions={Array []}
        selectedPanelName=""
        selectedSubTabId="main-content-events"
        setIsLiveTailPopoverOpen={[Function]}
        setSelectedCustomPanelOptions={[Function]}
        setSelectedPanelName={[Function]}
        showSavePanelOptionsList={false}
        startTime="now-15m"
        stopLive={[Function]}
        tabId="pomjQYQBg4Jf5lv0c5Ke"
        tempQuery=""
      >
        <div
          className="globalQueryBar"
        >
          <EuiFlexGroup
            alignItems="flexStart"
            gutterSize="s"
            justifyContent="flexStart"
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsFlexStart euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                className="search-area"
                key="search-bar"
              >
                <div
                  className="euiFlexItem search-area"
                >
                  <Autocomplete
                    baseQuery=""
                    dslService={
                      Object {
                        "fetch": [MockFunction],
                        "fetchFields": [MockFunction],
                        "fetchIndices": [MockFunction],
                        "http": [MockFunction],
                      }
                    }
                    getSuggestions={[Function]}
                    handleQueryChange={[Function]}
                    handleQuerySearch={[Function]}
                    key="autocomplete-search-bar"
                    onItemSelect={[Function]}
                    query=""
                    tabId="pomjQYQBg4Jf5lv0c5Ke"
                    tempQuery=""
                  >
                    <div
                      aria-expanded={false}
                      aria-haspopup="listbox"
                      aria-labelledby="autocomplete-0-label"
                      className="aa-Autocomplete"
                      id="autocomplete-root"
                      role="combobox"
                    >
                      <EuiTextArea
                        aria-autocomplete="both"
                        aria-labelledby="autocomplete-0-label"
                        autoCapitalize="off"
                        autoComplete="off"
                        autoCorrect="off"
                        autoFocus={false}
                        data-test-subj="searchAutocompleteTextArea"
                        enterKeyHint="search"
                        id="autocomplete-textarea"
                        maxLength={512}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        placeholder="Enter PPL query"
                        spellCheck="false"
                        type="search"
                        value=""
                      >
                        <EuiValidatableControl>
                          <textarea
                            aria-autocomplete="both"
                            aria-labelledby="autocomplete-0-label"
                            autoCapitalize="off"
                            autoComplete="off"
                            autoCorrect="off"
                            autoFocus={false}
                            className="euiTextArea euiTextArea--resizeVertical"
                            data-test-subj="searchAutocompleteTextArea"
                            enterKeyHint="search"
                            id="autocomplete-textarea"
                            maxLength={512}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            placeholder="Enter PPL query"
                            rows={6}
                            spellCheck="false"
                            type="search"
                            value=""
                          />
                        </EuiValidatableControl>
                      </EuiTextArea>
                    </div>
                  </Autocomplete>
                  <EuiBadge
                    className="ppl-link ppl-link-light"
                    color="hollow"
                    onClick={[Function]}
                    onClickAriaLabel="pplLinkShowFlyout"
                  >
                    <EuiInnerText>
                      <button
                        aria-label="pplLinkShowFlyout"
                        className="euiBadge euiBadge-isClickable euiBadge--hollow euiBadge--iconLeft ppl-link ppl-link-light"
                        disabled={false}
                        onClick={[Function]}
                        title="PPL"
                      >
                        <span
                          className="euiBadge__content"
                        >
                          <span
                            className="euiBadge__text"
                          >
                            PPL
                          </span>
                        </span>
                      </button>
                    </EuiInnerText>
                  </EuiBadge>
                </div>
              </EuiFlexItem>
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                />
              </EuiFlexItem>
              <EuiFlexItem
                className="euiFlexItem--flexGrowZero event-date-picker"
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero euiFlexItem--flexGrowZero event-date-picker"
                >
                  <DatePicker
                    endTime="now"
                    handleTimePickerChange={[Function]}
                    handleTimeRangePickerRefresh={[Function]}
                    startTime="now-15m"
                  >
                    <EuiSuperDatePicker
                      className="osdQueryBar__datePicker"
                      commonlyUsedRanges={
                        Array [
                          Object {
                            "end": "now/d",
                            "label": "Today",
                            "start": "now/d",
                          },
                          Object {
                            "end": "now/w",
                            "label": "This week",
                            "start": "now/w",
                          },
                          Object {
                            "end": "now/M",
                            "label": "This month",
                            "start": "now/M",
                          },
                          Object {
                            "end": "now/y",
                            "label": "This year",
                            "start": "now/y",
                          },
                          Object {
                            "end": "now-1d/d",
                            "label": "Yesterday",
                            "start": "now-1d/d",
                          },
                          Object {
                            "end": "now",
                            "label": "Week to date",
                            "start": "now/w",
                          },
                          Object {
                            "end": "now",
                            "label": "Month to date",
                            "start": "now/M",
                          },
                          Object {
                            "end": "now",
                            "label": "Year to date",
                            "start": "now/y",
                          },
                        ]
                      }
                      data-test-subj="pplSearchDatePicker"
                      dateFormat=""
                      end="now"
                      isAutoRefreshOnly={false}
                      isDisabled={false}
                      isPaused={true}
                      onRefresh={[Function]}
                      onTimeChange={[Function]}
                      recentlyUsedRanges={Array []}
                      refreshInterval={0}
                      showUpdateButton={true}
                      start="now-15m"
                      timeFormat="HH:mm"
                    >
                      <EuiFlexGroup
                        className="euiSuperDatePicker__flexWrapper"
                        gutterSize="s"
                        responsive={false}
                      >
                        <div
                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper"
                        >
                          <EuiFlexItem>
                            <div
                              className="euiFlexItem"
                            >
                              <EuiFormControlLayout
                                className="euiSuperDatePicker"
                                isDisabled={false}
                                prepend={
                                  <EuiQuickSelectPopover
                                    applyTime={[Function]}
                                    commonlyUsedRanges={
                                      Array [
                                        Object {
                                          "end": "now/d",
                                          "label": "Today",
                                          "start": "now/d",
                                        },
                                        Object {
                                          "end": "now/w",
                                          "label": "This week",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now/M",
                                          "label": "This month",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now/y",
                                          "label": "This year",
                                          "start": "now/y",
                                        },
                                        Object {
                                          "end": "now-1d/d",
                                          "label": "Yesterday",
                                          "start": "now-1d/d",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Week to date",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Month to date",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Year to date",
                                          "start": "now/y",
                                        },
                                      ]
                                    }
                                    dateFormat=""
                                    end="now"
                                    isAutoRefreshOnly={false}
                                    isDisabled={false}
                                    isPaused={true}
                                    recentlyUsedRanges={Array []}
                                    refreshInterval={0}
                                    start="now-15m"
                                  />
                                }
                              >
                                <div
                                  className="euiFormControlLayout euiFormControlLayout--group euiSuperDatePicker"
                                >
                                  <EuiQuickSelectPopover
                                    applyTime={[Function]}
                                    className="euiFormControlLayout__prepend"
                                    commonlyUsedRanges={
                                      Array [
                                        Object {
                                          "end": "now/d",
                                          "label": "Today",
                                          "start": "now/d",
                                        },
                                        Object {
                                          "end": "now/w",
                                          "label": "This week",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now/M",
                                          "label": "This month",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now/y",
                                          "label": "This year",
                                          "start": "now/y",
                                        },
                                        Object {
                                          "end": "now-1d/d",
                                          "label": "Yesterday",
                                          "start": "now-1d/d",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Week to date",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Month to date",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Year to date",
                                          "start": "now/y",
                                        },
                                      ]
                                    }
                                    dateFormat=""
                                    end="now"
                                    isAutoRefreshOnly={false}
                                    isDisabled={false}
                                    isPaused={true}
                                    key="0/.0"
                                    recentlyUsedRanges={Array []}
                                    refreshInterval={0}
                                    start="now-15m"
                                  >
                                    <EuiPopover
                                      anchorClassName="euiQuickSelectPopover__anchor"
                                      anchorPosition="downLeft"
                                      button={
                                        <EuiButtonEmpty
                                          aria-label="Date quick select"
                                          className="euiFormControlLayout__prepend"
                                          data-test-subj="superDatePickerToggleQuickMenuButton"
                                          iconSide="right"
                                          iconType="arrowDown"
                                          isDisabled={false}
                                          onClick={[Function]}
                                          size="xs"
                                          textProps={
                                            Object {
                                              "className": "euiQuickSelectPopover__buttonText",
                                            }
                                          }
                                        >
                                          <EuiIcon
                                            type="calendar"
                                          />
                                        </EuiButtonEmpty>
                                      }
                                      closePopover={[Function]}
                                      display="inlineBlock"
                                      hasArrow={true}
                                      isOpen={false}
                                      ownFocus={true}
                                      panelPaddingSize="m"
                                    >
                                      <div
                                        className="euiPopover euiPopover--anchorDownLeft"
                                      >
                                        <div
                                          className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                        >
                                          <EuiButtonEmpty
                                            aria-label="Date quick select"
                                            className="euiFormControlLayout__prepend"
                                            data-test-subj="superDatePickerToggleQuickMenuButton"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            isDisabled={false}
                                            onClick={[Function]}
                                            size="xs"
                                            textProps={
                                              Object {
                                                "className": "euiQuickSelectPopover__buttonText",
                                              }
                                            }
                                          >
                                            <button
                                              aria-label="Date quick select"
                                              className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                              data-test-subj="superDatePickerToggleQuickMenuButton"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <EuiButtonContent
                                                className="euiButtonEmpty__content"
                                                iconSide="right"
                                                iconSize="s"
                                                iconType="arrowDown"
                                                textProps={
                                                  Object {
                                                    "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                >
                                                  <EuiIcon
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    size="s"
                                                    type="arrowDown"
                                                  >
                                                    <EuiIconEmpty
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      />
                                                    </EuiIconEmpty>
                                                  </EuiIcon>
                                                  <span
                                                    className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                                  >
                                                    <EuiIcon
                                                      type="calendar"
                                                    >
                                                      <EuiIconEmpty
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--medium euiIcon-isLoading"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        />
                                                      </EuiIconEmpty>
                                                    </EuiIcon>
                                                  </span>
                                                </span>
                                              </EuiButtonContent>
                                            </button>
                                          </EuiButtonEmpty>
                                        </div>
                                      </div>
                                    </EuiPopover>
                                  </EuiQuickSelectPopover>
                                  <div
                                    className="euiFormControlLayout__childrenWrapper"
                                  >
                                    <EuiDatePickerRange
                                      className="euiDatePickerRange--inGroup"
                                      endDateControl={<div />}
                                      iconType={false}
                                      isCustom={true}
                                      startDateControl={<div />}
                                    >
                                      <div
                                        className="euiDatePickerRange euiDatePickerRange--inGroup"
                                      >
                                        <button
                                          className="euiSuperDatePicker__prettyFormat"
                                          data-test-subj="superDatePickerShowDatesButton"
                                          disabled={false}
                                          onClick={[Function]}
                                        >
                                          Last 15 minutes
                                          <span
                                            className="euiSuperDatePicker__prettyFormatLink"
                                          >
                                            <EuiI18n
                                              default="Show dates"
                                              token="euiSuperDatePicker.showDatesButtonLabel"
                                            >
                                              Show dates
                                            </EuiI18n>
                                          </span>
                                        </button>
                                      </div>
                                    </EuiDatePickerRange>
                                    <EuiFormControlLayoutIcons />
                                  </div>
                                </div>
                              </EuiFormControlLayout>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <EuiSuperUpdateButton
                                data-test-subj="superDatePickerApplyTimeButton"
                                isDisabled={false}
                                isLoading={false}
                                needsUpdate={false}
                                onClick={[Function]}
                                showTooltip={true}
                              >
                                <EuiToolTip
                                  delay="regular"
                                  position="bottom"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButton
                                      className="euiSuperUpdateButton"
                                      color="primary"
                                      data-test-subj="superDatePickerApplyTimeButton"
                                      fill={true}
                                      iconType="refresh"
                                      isDisabled={false}
                                      isLoading={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      textProps={
                                        Object {
                                          "className": "euiSuperUpdateButton__text",
                                        }
                                      }
                                    >
                                      <EuiButtonDisplay
                                        baseClassName="euiButton"
                                        className="euiSuperUpdateButton"
                                        color="primary"
                                        data-test-subj="superDatePickerApplyTimeButton"
                                        disabled={false}
                                        element="button"
                                        fill={true}
                                        iconType="refresh"
                                        isDisabled={false}
                                        isLoading={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        textProps={
                                          Object {
                                            "className": "euiSuperUpdateButton__text",
                                          }
                                        }
                                        type="button"
                                      >
                                        <button
                                          className="euiButton euiButton--primary euiButton--fill euiSuperUpdateButton"
                                          data-test-subj="superDatePickerApplyTimeButton"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          style={
                                            Object {
                                              "minWidth": undefined,
                                            }
                                          }
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButton__content"
                                            iconSide="left"
                                            iconType="refresh"
                                            isLoading={false}
                                            textProps={
                                              Object {
                                                "className": "euiButton__text euiSuperUpdateButton__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButton__content"
                                            >
                                              <EuiIcon
                                                className="euiButtonContent__icon"
                                                color="inherit"
                                                size="m"
                                                type="refresh"
                                              >
                                                <EuiIconEmpty
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  />
                                                </EuiIconEmpty>
                                              </EuiIcon>
                                              <span
                                                className="euiButton__text euiSuperUpdateButton__text"
                                              >
                                                <EuiI18n
                                                  default="Refresh"
                                                  token="euiSuperUpdateButton.refreshButtonLabel"
                                                >
                                                  Refresh
                                                </EuiI18n>
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonDisplay>
                                    </EuiButton>
                                  </span>
                                </EuiToolTip>
                              </EuiSuperUpdateButton>
                            </div>
                          </EuiFlexItem>
                        </div>
                      </EuiFlexGroup>
                    </EuiSuperDatePicker>
                  </DatePicker>
                </div>
              </EuiFlexItem>
              <EuiFlexItem
                className="euiFlexItem--flexGrowZero live-tail"
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero live-tail"
                >
                  <EuiPopover
                    anchorPosition="downCenter"
                    button={
                      <LiveTailButton
                        dataTestSubj="eventLiveTail"
                        isLiveTailOn={false}
                        isLiveTailPopoverOpen={false}
                        liveTailName="Live"
                        setIsLiveTailPopoverOpen={[Function]}
                      />
                    }
                    closePopover={[Function]}
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="none"
                  >
                    <div
                      className="euiPopover euiPopover--anchorDownCenter"
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <LiveTailButton
                          dataTestSubj="eventLiveTail"
                          isLiveTailOn={false}
                          isLiveTailPopoverOpen={false}
                          liveTailName="Live"
                          setIsLiveTailPopoverOpen={[Function]}
                        >
                          <EuiButton
                            data-test-subj="eventLiveTail"
                            iconSide="left"
                            iconType="play"
                            onClick={[Function]}
                          >
                            <EuiButtonDisplay
                              baseClassName="euiButton"
                              data-test-subj="eventLiveTail"
                              disabled={false}
                              element="button"
                              iconSide="left"
                              iconType="play"
                              isDisabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="euiButton euiButton--primary"
                                data-test-subj="eventLiveTail"
                                disabled={false}
                                onClick={[Function]}
                                style={
                                  Object {
                                    "minWidth": undefined,
                                  }
                                }
                                type="button"
                              >
                                <EuiButtonContent
                                  className="euiButton__content"
                                  iconSide="left"
                                  iconType="play"
                                  textProps={
                                    Object {
                                      "className": "euiButton__text",
                                    }
                                  }
                                >
                                  <span
                                    className="euiButtonContent euiButton__content"
                                  >
                                    <EuiIcon
                                      className="euiButtonContent__icon"
                                      color="inherit"
                                      size="m"
                                      type="play"
                                    >
                                      <EuiIconEmpty
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                        focusable="false"
                                        role="img"
                                        style={null}
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                                          focusable="false"
                                          height={16}
                                          role="img"
                                          style={null}
                                          viewBox="0 0 16 16"
                                          width={16}
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </EuiIconEmpty>
                                    </EuiIcon>
                                    <span
                                      className="euiButton__text"
                                    >
                                      Live
                                    </span>
                                  </span>
                                </EuiButtonContent>
                              </button>
                            </EuiButtonDisplay>
                          </EuiButton>
                        </LiveTailButton>
                      </div>
                    </div>
                  </EuiPopover>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
        </div>
      </Search>
      <EuiTabbedContent
        autoFocus="initial"
        className="mainContentTabs"
        initialSelectedTab={
          Object {
            "content": <React.Fragment>
              <main
                className="container-fluid"
              >
                <div
                  className="row"
                >
                  <div
                    className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                    data-test-subj="eventExplorer__sidebar"
                    id="discover-sidebar"
                  >
                    <div
                      className="explorerFieldSelector"
                    >
                      <Sidebar
                        explorerData={
                          Object {
                            "dataRows": Array [
                              Array [
                                "data11",
                                "data12",
                              ],
                              Array [
                                "data21",
                                "data22",
                              ],
                            ],
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "schema": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "size": 200,
                            "total": 200,
                          }
                        }
                        explorerFields={
                          Object {
                            "availableFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "queriedFields": Array [],
                            "selectedFields": Array [],
                            "unselectedFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                          }
                        }
                        handleAddField={[Function]}
                        handleOverrideTimestamp={[Function]}
                        handleRemoveField={[Function]}
                        isFieldToggleButtonDisabled={false}
                        isOverridingTimestamp={false}
                        query={
                          Object {
                            "0": "now-24h",
                            "1": "now",
                            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                            "index": "",
                            "isLoaded": true,
                            "rawQuery": "",
                            "selectedTimestamp": "timestamp",
                            "tabCreatedType": "newTab",
                          }
                        }
                        selectedTimestamp="timestamp"
                      />
                    </div>
                    <EuiButtonIcon
                      aria-controls="discover-sidebar"
                      aria-expanded="true"
                      aria-label="Toggle sidebar"
                      className="dscCollapsibleSidebar__collapseButton"
                      data-test-subj="collapseSideBarButton"
                      iconSize="m"
                      iconType="menuLeft"
                      onClick={[Function]}
                      size="s"
                    />
                  </div>
                  <div
                    className="dscWrapper col-md-10"
                  >
                    <div
                      className="dscWrapper__content"
                    >
                      <div
                        className="dscResults"
                      >
                        <React.Fragment>
                          <EuiFlexGroup
                            alignItems="center"
                            justifyContent="center"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <HitsCounter
                                hits={0}
                                onResetQuery={[Function]}
                                showResetButton={false}
                              />
                            </EuiFlexItem>
                            <EuiFlexItem
                              grow={false}
                            >
                              <TimechartHeader
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                onChangeInterval={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "text": "Minute",
                                      "value": "m",
                                    },
                                    Object {
                                      "text": "Hour",
                                      "value": "h",
                                    },
                                    Object {
                                      "text": "Day",
                                      "value": "d",
                                    },
                                    Object {
                                      "text": "Week",
                                      "value": "w",
                                    },
                                    Object {
                                      "text": "Month",
                                      "value": "M",
                                    },
                                    Object {
                                      "text": "Year",
                                      "value": "y",
                                    },
                                  ]
                                }
                                stateInterval="auto"
                              />
                            </EuiFlexItem>
                          </EuiFlexGroup>
                          <CountDistribution
                            countDistribution={
                              Object {
                                "data": Object {
                                  "name1": Array [
                                    "data11",
                                    "data21",
                                  ],
                                  "name2": Array [
                                    "data12",
                                    "data22",
                                  ],
                                },
                                "jsonData": Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ],
                                "metaData": Object {
                                  "fields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "size": 2,
                                  "status": 200,
                                },
                              }
                            }
                          />
                        </React.Fragment>
                        <section
                          aria-labelledby="documentsAriaLabel"
                          className="dscTable dscTableFixedScroll"
                        >
                          <h2
                            className="euiScreenReaderOnly"
                            id="documentsAriaLabel"
                          >
                            <FormattedMessage
                              defaultMessage="Documents"
                              id="discover.documentsAriaLabel"
                              values={Object {}}
                            />
                          </h2>
                          <div
                            className="dscDiscover"
                          >
                            <DataGrid
                              explorerFields={
                                Object {
                                  "availableFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "queriedFields": Array [],
                                  "selectedFields": Array [],
                                  "unselectedFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                }
                              }
                              http={[MockFunction]}
                              pplService={
                                Object {
                                  "fetch": [MockFunction],
                                  "http": [MockFunction],
                                }
                              }
                              rawQuery=""
                              rows={
                                Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ]
                              }
                              timeStampField="timestamp"
                            />
                            <a
                              id="discoverBottomMarker"
                              tabIndex={0}
                            >
                              ​
                            </a>
                          </div>
                        </section>
                      </div>
                    </div>
                  </div>
                </div>
              </main>
            </React.Fragment>,
            "id": "main-content-events",
            "name": <React.Fragment>
              <EuiText
                color="default"
                data-test-subj="main-content-eventsTab"
                size="s"
                textAlign="left"
              >
                <span
                  className="tab-title"
                >
                  Events
                </span>
              </EuiText>
            </React.Fragment>,
          }
        }
        onTabClick={[Function]}
        selectedTab={
          Object {
            "content": <React.Fragment>
              <main
                className="container-fluid"
              >
                <div
                  className="row"
                >
                  <div
                    className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                    data-test-subj="eventExplorer__sidebar"
                    id="discover-sidebar"
                  >
                    <div
                      className="explorerFieldSelector"
                    >
                      <Sidebar
                        explorerData={
                          Object {
                            "dataRows": Array [
                              Array [
                                "data11",
                                "data12",
                              ],
                              Array [
                                "data21",
                                "data22",
                              ],
                            ],
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "schema": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "size": 200,
                            "total": 200,
                          }
                        }
                        explorerFields={
                          Object {
                            "availableFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "queriedFields": Array [],
                            "selectedFields": Array [],
                            "unselectedFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                          }
                        }
                        handleAddField={[Function]}
                        handleOverrideTimestamp={[Function]}
                        handleRemoveField={[Function]}
                        isFieldToggleButtonDisabled={false}
                        isOverridingTimestamp={false}
                        query={
                          Object {
                            "0": "now-24h",
                            "1": "now",
                            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                            "index": "",
                            "isLoaded": true,
                            "rawQuery": "",
                            "selectedTimestamp": "timestamp",
                            "tabCreatedType": "newTab",
                          }
                        }
                        selectedTimestamp="timestamp"
                      />
                    </div>
                    <EuiButtonIcon
                      aria-controls="discover-sidebar"
                      aria-expanded="true"
                      aria-label="Toggle sidebar"
                      className="dscCollapsibleSidebar__collapseButton"
                      data-test-subj="collapseSideBarButton"
                      iconSize="m"
                      iconType="menuLeft"
                      onClick={[Function]}
                      size="s"
                    />
                  </div>
                  <div
                    className="dscWrapper col-md-10"
                  >
                    <div
                      className="dscWrapper__content"
                    >
                      <div
                        className="dscResults"
                      >
                        <React.Fragment>
                          <EuiFlexGroup
                            alignItems="center"
                            justifyContent="center"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <HitsCounter
                                hits={0}
                                onResetQuery={[Function]}
                                showResetButton={false}
                              />
                            </EuiFlexItem>
                            <EuiFlexItem
                              grow={false}
                            >
                              <TimechartHeader
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                onChangeInterval={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "text": "Minute",
                                      "value": "m",
                                    },
                                    Object {
                                      "text": "Hour",
                                      "value": "h",
                                    },
                                    Object {
                                      "text": "Day",
                                      "value": "d",
                                    },
                                    Object {
                                      "text": "Week",
                                      "value": "w",
                                    },
                                    Object {
                                      "text": "Month",
                                      "value": "M",
                                    },
                                    Object {
                                      "text": "Year",
                                      "value": "y",
                                    },
                                  ]
                                }
                                stateInterval="auto"
                              />
                            </EuiFlexItem>
                          </EuiFlexGroup>
                          <CountDistribution
                            countDistribution={
                              Object {
                                "data": Object {
                                  "name1": Array [
                                    "data11",
                                    "data21",
                                  ],
                                  "name2": Array [
                                    "data12",
                                    "data22",
                                  ],
                                },
                                "jsonData": Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ],
                                "metaData": Object {
                                  "fields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "size": 2,
                                  "status": 200,
                                },
                              }
                            }
                          />
                        </React.Fragment>
                        <section
                          aria-labelledby="documentsAriaLabel"
                          className="dscTable dscTableFixedScroll"
                        >
                          <h2
                            className="euiScreenReaderOnly"
                            id="documentsAriaLabel"
                          >
                            <FormattedMessage
                              defaultMessage="Documents"
                              id="discover.documentsAriaLabel"
                              values={Object {}}
                            />
                          </h2>
                          <div
                            className="dscDiscover"
                          >
                            <DataGrid
                              explorerFields={
                                Object {
                                  "availableFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "queriedFields": Array [],
                                  "selectedFields": Array [],
                                  "unselectedFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                }
                              }
                              http={[MockFunction]}
                              pplService={
                                Object {
                                  "fetch": [MockFunction],
                                  "http": [MockFunction],
                                }
                              }
                              rawQuery=""
                              rows={
                                Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ]
                              }
                              timeStampField="timestamp"
                            />
                            <a
                              id="discoverBottomMarker"
                              tabIndex={0}
                            >
                              ​
                            </a>
                          </div>
                        </section>
                      </div>
                    </div>
                  </div>
                </div>
              </main>
            </React.Fragment>,
            "id": "main-content-events",
            "name": <React.Fragment>
              <EuiText
                color="default"
                data-test-subj="main-content-eventsTab"
                size="s"
                textAlign="left"
              >
                <span
                  className="tab-title"
                >
                  Events
                </span>
              </EuiText>
            </React.Fragment>,
          }
        }
        tabs={
          Array [
            Object {
              "content": <React.Fragment>
                <main
                  className="container-fluid"
                >
                  <div
                    className="row"
                  >
                    <div
                      className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                      data-test-subj="eventExplorer__sidebar"
                      id="discover-sidebar"
                    >
                      <div
                        className="explorerFieldSelector"
                      >
                        <Sidebar
                          explorerData={
                            Object {
                              "dataRows": Array [
                                Array [
                                  "data11",
                                  "data12",
                                ],
                                Array [
                                  "data21",
                                  "data22",
                                ],
                              ],
                              "jsonData": Array [
                                Object {
                                  "name1": "data11",
                                  "name2": "data12",
                                },
                                Object {
                                  "name1": "data21",
                                  "name2": "data22",
                                },
                              ],
                              "schema": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                              "size": 200,
                              "total": 200,
                            }
                          }
                          explorerFields={
                            Object {
                              "availableFields": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                              "queriedFields": Array [],
                              "selectedFields": Array [],
                              "unselectedFields": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                            }
                          }
                          handleAddField={[Function]}
                          handleOverrideTimestamp={[Function]}
                          handleRemoveField={[Function]}
                          isFieldToggleButtonDisabled={false}
                          isOverridingTimestamp={false}
                          query={
                            Object {
                              "0": "now-24h",
                              "1": "now",
                              "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                              "index": "",
                              "isLoaded": true,
                              "rawQuery": "",
                              "selectedTimestamp": "timestamp",
                              "tabCreatedType": "newTab",
                            }
                          }
                          selectedTimestamp="timestamp"
                        />
                      </div>
                      <EuiButtonIcon
                        aria-controls="discover-sidebar"
                        aria-expanded="true"
                        aria-label="Toggle sidebar"
                        className="dscCollapsibleSidebar__collapseButton"
                        data-test-subj="collapseSideBarButton"
                        iconSize="m"
                        iconType="menuLeft"
                        onClick={[Function]}
                        size="s"
                      />
                    </div>
                    <div
                      className="dscWrapper col-md-10"
                    >
                      <div
                        className="dscWrapper__content"
                      >
                        <div
                          className="dscResults"
                        >
                          <React.Fragment>
                            <EuiFlexGroup
                              alignItems="center"
                              justifyContent="center"
                            >
                              <EuiFlexItem
                                grow={false}
                              >
                                <HitsCounter
                                  hits={0}
                                  onResetQuery={[Function]}
                                  showResetButton={false}
                                />
                              </EuiFlexItem>
                              <EuiFlexItem
                                grow={false}
                              >
                                <TimechartHeader
                                  dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                  onChangeInterval={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "text": "Minute",
                                        "value": "m",
                                      },
                                      Object {
                                        "text": "Hour",
                                        "value": "h",
                                      },
                                      Object {
                                        "text": "Day",
                                        "value": "d",
                                      },
                                      Object {
                                        "text": "Week",
                                        "value": "w",
                                      },
                                      Object {
                                        "text": "Month",
                                        "value": "M",
                                      },
                                      Object {
                                        "text": "Year",
                                        "value": "y",
                                      },
                                    ]
                                  }
                                  stateInterval="auto"
                                />
                              </EuiFlexItem>
                            </EuiFlexGroup>
                            <CountDistribution
                              countDistribution={
                                Object {
                                  "data": Object {
                                    "name1": Array [
                                      "data11",
                                      "data21",
                                    ],
                                    "name2": Array [
                                      "data12",
                                      "data22",
                                    ],
                                  },
                                  "jsonData": Array [
                                    Object {
                                      "name1": "data11",
                                      "name2": "data12",
                                    },
                                    Object {
                                      "name1": "data21",
                                      "name2": "data22",
                                    },
                                  ],
                                  "metaData": Object {
                                    "fields": Array [
                                      Object {
                                        "name": "name1",
                                        "type": "string",
                                      },
                                      Object {
                                        "name": "name2",
                                        "type": "string",
                                      },
                                    ],
                                    "size": 2,
                                    "status": 200,
                                  },
                                }
                              }
                            />
                          </React.Fragment>
                          <section
                            aria-labelledby="documentsAriaLabel"
                            className="dscTable dscTableFixedScroll"
                          >
                            <h2
                              className="euiScreenReaderOnly"
                              id="documentsAriaLabel"
                            >
                              <FormattedMessage
                                defaultMessage="Documents"
                                id="discover.documentsAriaLabel"
                                values={Object {}}
                              />
                            </h2>
                            <div
                              className="dscDiscover"
                            >
                              <DataGrid
                                explorerFields={
                                  Object {
                                    "availableFields": Array [
                                      Object {
                                        "name": "name1",
                                        "type": "string",
                                      },
                                      Object {
                                        "name": "name2",
                                        "type": "string",
                                      },
                                    ],
                                    "queriedFields": Array [],
                                    "selectedFields": Array [],
                                    "unselectedFields": Array [
                                      Object {
                                        "name": "name1",
                                        "type": "string",
                                      },
                                      Object {
                                        "name": "name2",
                                        "type": "string",
                                      },
                                    ],
                                  }
                                }
                                http={[MockFunction]}
                                pplService={
                                  Object {
                                    "fetch": [MockFunction],
                                    "http": [MockFunction],
                                  }
                                }
                                rawQuery=""
                                rows={
                                  Array [
                                    Object {
                                      "name1": "data11",
                                      "name2": "data12",
                                    },
                                    Object {
                                      "name1": "data21",
                                      "name2": "data22",
                                    },
                                  ]
                                }
                                timeStampField="timestamp"
                              />
                              <a
                                id="discoverBottomMarker"
                                tabIndex={0}
                              >
                                ​
                              </a>
                            </div>
                          </section>
                        </div>
                      </div>
                    </div>
                  </div>
                </main>
              </React.Fragment>,
              "id": "main-content-events",
              "name": <React.Fragment>
                <EuiText
                  color="default"
                  data-test-subj="main-content-eventsTab"
                  size="s"
                  textAlign="left"
                >
                  <span
                    className="tab-title"
                  >
                    Events
                  </span>
                </EuiText>
              </React.Fragment>,
            },
            Object {
              "content": <React.Fragment>
                <ExplorerVisualizations
                  callback={[Function]}
                  curVisId="bar"
                  explorerData={
                    Object {
                      "dataRows": Array [
                        Array [
                          "data11",
                          "data12",
                        ],
                        Array [
                          "data21",
                          "data22",
                        ],
                      ],
                      "jsonData": Array [
                        Object {
                          "name1": "data11",
                          "name2": "data12",
                        },
                        Object {
                          "name1": "data21",
                          "name2": "data22",
                        },
                      ],
                      "schema": Array [
                        Object {
                          "name": "name1",
                          "type": "string",
                        },
                        Object {
                          "name": "name2",
                          "type": "string",
                        },
                      ],
                      "size": 200,
                      "total": 200,
                    }
                  }
                  explorerFields={
                    Object {
                      "availableFields": Array [
                        Object {
                          "name": "name1",
                          "type": "string",
                        },
                        Object {
                          "name": "name2",
                          "type": "string",
                        },
                      ],
                      "queriedFields": Array [],
                      "selectedFields": Array [],
                      "unselectedFields": Array [
                        Object {
                          "name": "name1",
                          "type": "string",
                        },
                        Object {
                          "name": "name2",
                          "type": "string",
                        },
                      ],
                    }
                  }
                  handleAddField={[Function]}
                  handleOverrideTimestamp={[Function]}
                  handleRemoveField={[Function]}
                  query={
                    Object {
                      "0": "now-24h",
                      "1": "now",
                      "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                      "index": "",
                      "isLoaded": true,
                      "rawQuery": "",
                      "selectedTimestamp": "timestamp",
                      "tabCreatedType": "newTab",
                    }
                  }
                  queryManager={QueryManager {}}
                  setCurVisId={[Function]}
                  visualizations={
                    Object {
                      "data": Object {
                        "appData": Object {
                          "fromApp": false,
                        },
                        "defaultAxes": Object {},
                        "explorer": Object {
                          "explorerData": Object {
                            "dataRows": Array [
                              Array [
                                "data11",
                                "data12",
                              ],
                              Array [
                                "data21",
                                "data22",
                              ],
                            ],
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "schema": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "size": 200,
                            "total": 200,
                          },
                          "explorerFields": Object {
                            "availableFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "queriedFields": Array [],
                            "selectedFields": Array [],
                            "unselectedFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                          },
                          "http": [MockFunction],
                          "pplService": Object {
                            "fetch": [MockFunction],
                            "http": [MockFunction],
                          },
                          "query": Object {
                            "0": "now-24h",
                            "1": "now",
                            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                            "index": "",
                            "isLoaded": true,
                            "rawQuery": "",
                            "selectedTimestamp": "timestamp",
                            "tabCreatedType": "newTab",
                          },
                        },
                        "indexFields": Object {
                          "availableFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                          "queriedFields": Array [],
                          "selectedFields": Array [],
                          "unselectedFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                        },
                        "query": Object {
                          "0": "now-24h",
                          "1": "now",
                          "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                          "index": "",
                          "isLoaded": true,
                          "rawQuery": "",
                          "selectedTimestamp": "timestamp",
                          "tabCreatedType": "newTab",
                        },
                        "rawVizData": Object {},
                        "userConfigs": Object {},
                      },
                      "vis": Object {
                        "barwidth": 0.97,
                        "category": "Visualizations",
                        "categoryaxis": "xaxis",
                        "component": [Function],
                        "editorconfig": Object {
                          "panelTabs": Array [
                            Object {
                              "editor": [Function],
                              "id": "data-panel",
                              "mapTo": "dataConfig",
                              "name": "Style",
                              "sections": Array [
                                Object {
                                  "editor": [Function],
                                  "id": "tooltip_options",
                                  "mapTo": "tooltipOptions",
                                  "name": "Tooltip options",
                                  "schemas": Array [
                                    Object {
                                      "component": null,
                                      "mapTo": "tooltipMode",
                                      "name": "Tooltip mode",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                          Object {
                                            "id": "hidden",
                                            "name": "Hidden",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": null,
                                      "mapTo": "tooltipText",
                                      "name": "Tooltip text",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "all",
                                            "name": "All",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "all",
                                            "name": "All",
                                          },
                                          Object {
                                            "id": "x",
                                            "name": "Dimension",
                                          },
                                          Object {
                                            "id": "y",
                                            "name": "Series",
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                Object {
                                  "editor": [Function],
                                  "id": "legend",
                                  "mapTo": "legend",
                                  "name": "Legend",
                                  "schemas": Array [
                                    Object {
                                      "component": null,
                                      "mapTo": "showLegend",
                                      "name": "Show legend",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                          Object {
                                            "id": "hidden",
                                            "name": "Hidden",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": null,
                                      "mapTo": "position",
                                      "name": "Position",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "v",
                                            "name": "Right",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "v",
                                            "name": "Right",
                                          },
                                          Object {
                                            "id": "h",
                                            "name": "Bottom",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "eleType": "input",
                                      "mapTo": "legendSize",
                                      "name": "Legend size",
                                      "title": "Legend size",
                                    },
                                  ],
                                },
                                Object {
                                  "editor": [Function],
                                  "id": "chart_styles",
                                  "mapTo": "chartStyles",
                                  "name": "Chart styles",
                                  "schemas": Array [
                                    Object {
                                      "component": [Function],
                                      "eleType": "buttons",
                                      "mapTo": "mode",
                                      "name": "Mode",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "group",
                                            "name": "Group",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "group",
                                            "name": "Group",
                                          },
                                          Object {
                                            "id": "stack",
                                            "name": "Stack",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "eleType": "input",
                                      "mapTo": "labelSize",
                                      "name": "Label size",
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 0,
                                      "eleType": "slider",
                                      "mapTo": "rotateBarLabels",
                                      "name": "Rotate bar labels",
                                      "props": Object {
                                        "max": 90,
                                        "min": -90,
                                        "showTicks": true,
                                        "ticks": Array [
                                          Object {
                                            "label": "-90°",
                                            "value": -90,
                                          },
                                          Object {
                                            "label": "-45°",
                                            "value": -45,
                                          },
                                          Object {
                                            "label": "0°",
                                            "value": 0,
                                          },
                                          Object {
                                            "label": "45°",
                                            "value": 45,
                                          },
                                          Object {
                                            "label": "90°",
                                            "value": 90,
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 0.7,
                                      "eleType": "slider",
                                      "mapTo": "groupWidth",
                                      "name": "Group width",
                                      "props": Object {
                                        "max": 1,
                                        "step": 0.01,
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 0.97,
                                      "eleType": "slider",
                                      "mapTo": "barWidth",
                                      "name": "Bar width",
                                      "props": Object {
                                        "max": 1,
                                        "step": 0.01,
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 2,
                                      "eleType": "slider",
                                      "mapTo": "lineWidth",
                                      "name": "Line width",
                                      "props": Object {
                                        "max": 10,
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 70,
                                      "eleType": "slider",
                                      "mapTo": "fillOpacity",
                                      "name": "Fill opacity",
                                      "props": Object {
                                        "max": 100,
                                      },
                                    },
                                  ],
                                },
                                Object {
                                  "editor": [Function],
                                  "id": "color-theme",
                                  "mapTo": "colorTheme",
                                  "name": "Color theme",
                                  "schemas": Array [],
                                },
                              ],
                            },
                            Object {
                              "editor": [Function],
                              "id": "availability-panel",
                              "mapTo": "availabilityConfig",
                              "name": "Availability",
                            },
                          ],
                        },
                        "fillopacity": 70,
                        "fulllabel": "Vertical bar",
                        "groupwidth": 0.7,
                        "icon": [Function],
                        "icontype": "visBarVerticalStacked",
                        "id": "bar",
                        "label": "Vertical bar",
                        "labelangle": 0,
                        "legendposition": "v",
                        "linewidth": 2,
                        "mode": "group",
                        "name": "bar",
                        "orientation": "v",
                        "selection": Object {
                          "dataLoss": "nothing",
                        },
                        "seriesaxis": "yaxis",
                        "showlegend": "show",
                        "type": "bar",
                        "visconfig": Object {
                          "config": Object {
                            "displaylogo": false,
                            "responsive": true,
                          },
                          "isUniColor": false,
                          "layout": Object {
                            "height": 1180,
                            "legend": Object {
                              "orientation": "v",
                              "traceorder": "normal",
                            },
                            "margin": Object {
                              "b": 30,
                              "l": 60,
                              "pad": 0,
                              "r": 30,
                              "t": 50,
                            },
                            "showlegend": true,
                          },
                        },
                      },
                    }
                  }
                />
              </React.Fragment>,
              "id": "main-content-vis",
              "name": <React.Fragment>
                <EuiText
                  color="default"
                  data-test-subj="main-content-visTab"
                  size="s"
                  textAlign="left"
                >
                  <span
                    className="tab-title"
                  >
                    Visualizations
                  </span>
                </EuiText>
              </React.Fragment>,
            },
          ]
        }
      >
        <div
          className="mainContentTabs"
        >
          <EuiTabs
            onFocus={[Function]}
          >
            <div
              className="euiTabs"
              onFocus={[Function]}
              role="tablist"
            >
              <EuiTab
                aria-controls="random_html_id"
                id="main-content-events"
                isSelected={true}
                key="main-content-events"
                onClick={[Function]}
              >
                <button
                  aria-controls="random_html_id"
                  aria-selected={true}
                  className="euiTab euiTab-isSelected"
                  disabled={false}
                  id="main-content-events"
                  onClick={[Function]}
                  role="tab"
                  type="button"
                >
                  <span
                    className="euiTab__content"
                  >
                    <EuiText
                      color="default"
                      data-test-subj="main-content-eventsTab"
                      size="s"
                      textAlign="left"
                    >
                      <div
                        className="euiText euiText--small"
                        data-test-subj="main-content-eventsTab"
                      >
                        <EuiTextAlign
                          textAlign="left"
                        >
                          <div
                            className="euiTextAlign euiTextAlign--left"
                          >
                            <EuiTextColor
                              color="default"
                              component="div"
                            >
                              <div
                                className="euiTextColor euiTextColor--default"
                              >
                                <span
                                  className="tab-title"
                                >
                                  Events
                                </span>
                              </div>
                            </EuiTextColor>
                          </div>
                        </EuiTextAlign>
                      </div>
                    </EuiText>
                  </span>
                </button>
              </EuiTab>
              <EuiTab
                aria-controls="random_html_id"
                id="main-content-vis"
                isSelected={false}
                key="main-content-vis"
                onClick={[Function]}
              >
                <button
                  aria-controls="random_html_id"
                  aria-selected={false}
                  className="euiTab"
                  disabled={false}
                  id="main-content-vis"
                  onClick={[Function]}
                  role="tab"
                  type="button"
                >
                  <span
                    className="euiTab__content"
                  >
                    <EuiText
                      color="default"
                      data-test-subj="main-content-visTab"
                      size="s"
                      textAlign="left"
                    >
                      <div
                        className="euiText euiText--small"
                        data-test-subj="main-content-visTab"
                      >
                        <EuiTextAlign
                          textAlign="left"
                        >
                          <div
                            className="euiTextAlign euiTextAlign--left"
                          >
                            <EuiTextColor
                              color="default"
                              component="div"
                            >
                              <div
                                className="euiTextColor euiTextColor--default"
                              >
                                <span
                                  className="tab-title"
                                >
                                  Visualizations
                                </span>
                              </div>
                            </EuiTextColor>
                          </div>
                        </EuiTextAlign>
                      </div>
                    </EuiText>
                  </span>
                </button>
              </EuiTab>
            </div>
          </EuiTabs>
          <div
            aria-labelledby="main-content-events"
            id="random_html_id"
            role="tabpanel"
          >
            <main
              className="container-fluid"
            >
              <div
                className="row"
              >
                <div
                  className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                  data-test-subj="eventExplorer__sidebar"
                  id="discover-sidebar"
                >
                  <div
                    className="explorerFieldSelector"
                  >
                    <Sidebar
                      explorerData={
                        Object {
                          "dataRows": Array [
                            Array [
                              "data11",
                              "data12",
                            ],
                            Array [
                              "data21",
                              "data22",
                            ],
                          ],
                          "jsonData": Array [
                            Object {
                              "name1": "data11",
                              "name2": "data12",
                            },
                            Object {
                              "name1": "data21",
                              "name2": "data22",
                            },
                          ],
                          "schema": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                          "size": 200,
                          "total": 200,
                        }
                      }
                      explorerFields={
                        Object {
                          "availableFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                          "queriedFields": Array [],
                          "selectedFields": Array [],
                          "unselectedFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                        }
                      }
                      handleAddField={[Function]}
                      handleOverrideTimestamp={[Function]}
                      handleRemoveField={[Function]}
                      isFieldToggleButtonDisabled={false}
                      isOverridingTimestamp={false}
                      query={
                        Object {
                          "0": "now-24h",
                          "1": "now",
                          "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                          "index": "",
                          "isLoaded": true,
                          "rawQuery": "",
                          "selectedTimestamp": "timestamp",
                          "tabCreatedType": "newTab",
                        }
                      }
                      selectedTimestamp="timestamp"
                    >
                      <I18nProvider>
                        <IntlProvider
                          defaultLocale="en"
                          formats={
                            Object {
                              "date": Object {
                                "full": Object {
                                  "day": "numeric",
                                  "month": "long",
                                  "weekday": "long",
                                  "year": "numeric",
                                },
                                "long": Object {
                                  "day": "numeric",
                                  "month": "long",
                                  "year": "numeric",
                                },
                                "medium": Object {
                                  "day": "numeric",
                                  "month": "short",
                                  "year": "numeric",
                                },
                                "short": Object {
                                  "day": "numeric",
                                  "month": "numeric",
                                  "year": "2-digit",
                                },
                              },
                              "number": Object {
                                "currency": Object {
                                  "style": "currency",
                                },
                                "percent": Object {
                                  "style": "percent",
                                },
                              },
                              "relative": Object {
                                "days": Object {
                                  "units": "day",
                                },
                                "hours": Object {
                                  "units": "hour",
                                },
                                "minutes": Object {
                                  "units": "minute",
                                },
                                "months": Object {
                                  "units": "month",
                                },
                                "seconds": Object {
                                  "units": "second",
                                },
                                "years": Object {
                                  "units": "year",
                                },
                              },
                              "time": Object {
                                "full": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                  "second": "numeric",
                                  "timeZoneName": "short",
                                },
                                "long": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                  "second": "numeric",
                                  "timeZoneName": "short",
                                },
                                "medium": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                  "second": "numeric",
                                },
                                "short": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                },
                              },
                            }
                          }
                          locale="en"
                          messages={Object {}}
                          textComponent={Symbol(react.fragment)}
                        >
                          <PseudoLocaleWrapper>
                            <section
                              className="sidebar-list"
                            >
                              <div
                                className="dscSidebar__item"
                              >
                                <EuiFieldSearch
                                  compressed={true}
                                  data-test-subj="eventExplorer__sidebarSearch"
                                  fullWidth={true}
                                  incremental={false}
                                  isClearable={true}
                                  isLoading={false}
                                  onChange={[Function]}
                                  placeholder="Search field names"
                                  value=""
                                >
                                  <EuiFormControlLayout
                                    compressed={true}
                                    fullWidth={true}
                                    icon="search"
                                    isLoading={false}
                                  >
                                    <div
                                      className="euiFormControlLayout euiFormControlLayout--fullWidth euiFormControlLayout--compressed"
                                    >
                                      <div
                                        className="euiFormControlLayout__childrenWrapper"
                                      >
                                        <EuiValidatableControl>
                                          <input
                                            className="euiFieldSearch euiFieldSearch--fullWidth euiFieldSearch--compressed"
                                            data-test-subj="eventExplorer__sidebarSearch"
                                            onChange={[Function]}
                                            onKeyUp={[Function]}
                                            placeholder="Search field names"
                                            type="search"
                                            value=""
                                          />
                                        </EuiValidatableControl>
                                        <EuiFormControlLayoutIcons
                                          compressed={true}
                                          icon="search"
                                          isLoading={false}
                                        >
                                          <div
                                            className="euiFormControlLayoutIcons"
                                          >
                                            <EuiFormControlLayoutCustomIcon
                                              size="s"
                                              type="search"
                                            >
                                              <span
                                                className="euiFormControlLayoutCustomIcon"
                                              >
                                                <EuiIcon
                                                  aria-hidden="true"
                                                  className="euiFormControlLayoutCustomIcon__icon"
                                                  size="s"
                                                  type="search"
                                                >
                                                  <EuiIconEmpty
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                    focusable="false"
                                                    role="img"
                                                    style={null}
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                      focusable="false"
                                                      height={16}
                                                      role="img"
                                                      style={null}
                                                      viewBox="0 0 16 16"
                                                      width={16}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    />
                                                  </EuiIconEmpty>
                                                </EuiIcon>
                                              </span>
                                            </EuiFormControlLayoutCustomIcon>
                                          </div>
                                        </EuiFormControlLayoutIcons>
                                      </div>
                                    </div>
                                  </EuiFormControlLayout>
                                </EuiFieldSearch>
                              </div>
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                              <div
                                className="sidebar-list"
                              >
                                <EuiSpacer
                                  size="s"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--s"
                                  />
                                </EuiSpacer>
                                <EuiAccordion
                                  arrowDisplay="left"
                                  buttonContent={
                                    <EuiTitle
                                      size="xxxs"
                                    >
                                      <span>
                                        Selected Fields
                                      </span>
                                    </EuiTitle>
                                  }
                                  id="fieldSelector__selectedFields"
                                  initialIsOpen={true}
                                  isLoading={false}
                                  isLoadingMessage={false}
                                  paddingSize="xs"
                                >
                                  <div
                                    className="euiAccordion euiAccordion-isOpen"
                                  >
                                    <div
                                      className="euiAccordion__triggerWrapper"
                                    >
                                      <button
                                        aria-controls="fieldSelector__selectedFields"
                                        aria-expanded={true}
                                        className="euiAccordion__button"
                                        id="random_html_id"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <span
                                          className="euiAccordion__iconWrapper"
                                        >
                                          <EuiIcon
                                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                                            size="m"
                                            type="arrowRight"
                                          >
                                            <EuiIconEmpty
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiIcon-isLoading euiAccordion__icon euiAccordion__icon-isOpen"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon-isLoading euiAccordion__icon euiAccordion__icon-isOpen"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              />
                                            </EuiIconEmpty>
                                          </EuiIcon>
                                        </span>
                                        <span
                                          className="euiIEFlexWrapFix"
                                        >
                                          <EuiTitle
                                            size="xxxs"
                                          >
                                            <span
                                              className="euiTitle euiTitle--xxxsmall"
                                            >
                                              Selected Fields
                                            </span>
                                          </EuiTitle>
                                        </span>
                                      </button>
                                    </div>
                                    <div
                                      aria-labelledby="random_html_id"
                                      className="euiAccordion__childWrapper"
                                      id="fieldSelector__selectedFields"
                                      role="region"
                                      tabIndex={-1}
                                    >
                                      <EuiResizeObserver
                                        onResize={[Function]}
                                      >
                                        <div>
                                          <div
                                            className="euiAccordion__padding--xs"
                                          >
                                            <ul
                                              aria-labelledby="selected_fields"
                                              className="dscSidebarList dscFieldList--selected"
                                              data-test-subj="fieldList-selected"
                                            />
                                          </div>
                                        </div>
                                      </EuiResizeObserver>
                                    </div>
                                  </div>
                                </EuiAccordion>
                                <EuiSpacer
                                  size="s"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--s"
                                  />
                                </EuiSpacer>
                                <EuiAccordion
                                  arrowDisplay="left"
                                  buttonContent={
                                    <EuiTitle
                                      size="xxxs"
                                    >
                                      <span>
                                        Available Fields
                                      </span>
                                    </EuiTitle>
                                  }
                                  id="fieldSelector__availableFields"
                                  initialIsOpen={true}
                                  isLoading={false}
                                  isLoadingMessage={false}
                                  paddingSize="xs"
                                >
                                  <div
                                    className="euiAccordion euiAccordion-isOpen"
                                  >
                                    <div
                                      className="euiAccordion__triggerWrapper"
                                    >
                                      <button
                                        aria-controls="fieldSelector__availableFields"
                                        aria-expanded={true}
                                        className="euiAccordion__button"
                                        id="random_html_id"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <span
                                          className="euiAccordion__iconWrapper"
                                        >
                                          <EuiIcon
                                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                                            size="m"
                                            type="arrowRight"
                                          >
                                            <EuiIconEmpty
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiIcon-isLoading euiAccordion__icon euiAccordion__icon-isOpen"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon-isLoading euiAccordion__icon euiAccordion__icon-isOpen"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              />
                                            </EuiIconEmpty>
                                          </EuiIcon>
                                        </span>
                                        <span
                                          className="euiIEFlexWrapFix"
                                        >
                                          <EuiTitle
                                            size="xxxs"
                                          >
                                            <span
                                              className="euiTitle euiTitle--xxxsmall"
                                            >
                                              Available Fields
                                            </span>
                                          </EuiTitle>
                                        </span>
                                      </button>
                                    </div>
                                    <div
                                      aria-labelledby="random_html_id"
                                      className="euiAccordion__childWrapper"
                                      id="fieldSelector__availableFields"
                                      role="region"
                                      tabIndex={-1}
                                    >
                                      <EuiResizeObserver
                                        onResize={[Function]}
                                      >
                                        <div>
                                          <div
                                            className="euiAccordion__padding--xs"
                                          >
                                            <ul
                                              aria-labelledby="available_fields"
                                              className="dscFieldList dscFieldList--unpopular hidden-sm hidden-xs"
                                              data-test-subj="fieldList-unpopular"
                                            >
                                              <li
                                                className="dscSidebar__item"
                                                data-attr-field="name1"
                                                key="fieldname1"
                                              >
                                                <Field
                                                  field={
                                                    Object {
                                                      "name": "name1",
                                                      "type": "string",
                                                    }
                                                  }
                                                  handleOverrideTimestamp={[Function]}
                                                  isFieldToggleButtonDisabled={false}
                                                  isOverridingTimestamp={false}
                                                  onToggleField={[Function]}
                                                  query={
                                                    Object {
                                                      "0": "now-24h",
                                                      "1": "now",
                                                      "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                                                      "index": "",
                                                      "isLoaded": true,
                                                      "rawQuery": "",
                                                      "selectedTimestamp": "timestamp",
                                                      "tabCreatedType": "newTab",
                                                    }
                                                  }
                                                  selected={false}
                                                  selectedTimestamp="timestamp"
                                                  showTimestampOverrideButton={true}
                                                >
                                                  <EuiPopover
                                                    anchorPosition="rightUp"
                                                    button={
                                                      <FieldButton
                                                        className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                        dataTestSubj="field-name1-showDetails"
                                                        fieldAction={
                                                          <React.Fragment>
                                                            <EuiToolTip
                                                              content="Override default timestamp"
                                                              delay="long"
                                                              id="override-timestamp"
                                                              position="top"
                                                            >
                                                              <React.Fragment />
                                                            </EuiToolTip>
                                                            <EuiToolTip
                                                              content="Add field as column"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <React.Fragment>
                                                                <EuiButtonIcon
                                                                  aria-label="Add name1 to table"
                                                                  className="dscSidebarItem__action"
                                                                  color="primary"
                                                                  data-test-subj="fieldToggle-name1"
                                                                  iconType="plusInCircleFilled"
                                                                  onClick={[Function]}
                                                                />
                                                              </React.Fragment>
                                                            </EuiToolTip>
                                                          </React.Fragment>
                                                        }
                                                        fieldIcon={
                                                          <FieldIcon
                                                            type="string"
                                                          />
                                                        }
                                                        fieldName={
                                                          <span
                                                            className="dscSidebarField__name"
                                                            data-test-subj="field-name1"
                                                            title="name1"
                                                          >
                                                            name1
                                                          </span>
                                                        }
                                                        isActive={false}
                                                        onClick={[Function]}
                                                        size="m"
                                                      />
                                                    }
                                                    closePopover={[Function]}
                                                    display="block"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelClassName="dscSidebarItem__fieldPopoverPanel"
                                                    panelPaddingSize="m"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorRightUp euiPopover--displayBlock"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <FieldButton
                                                          className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                          dataTestSubj="field-name1-showDetails"
                                                          fieldAction={
                                                            <React.Fragment>
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <React.Fragment />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <React.Fragment>
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name1 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name1"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  />
                                                                </React.Fragment>
                                                              </EuiToolTip>
                                                            </React.Fragment>
                                                          }
                                                          fieldIcon={
                                                            <FieldIcon
                                                              type="string"
                                                            />
                                                          }
                                                          fieldName={
                                                            <span
                                                              className="dscSidebarField__name"
                                                              data-test-subj="field-name1"
                                                              title="name1"
                                                            >
                                                              name1
                                                            </span>
                                                          }
                                                          isActive={false}
                                                          onClick={[Function]}
                                                          size="m"
                                                        >
                                                          <div
                                                            className="osdFieldButton shard__fieldSelectorField explorer__fieldSelectorField"
                                                          >
                                                            <button
                                                              className="osd-resetFocusState osdFieldButton__button"
                                                              data-test-subj="field-name1-showDetails"
                                                              onClick={[Function]}
                                                            >
                                                              <span
                                                                className="osdFieldButton__fieldIcon"
                                                              >
                                                                <FieldIcon
                                                                  type="string"
                                                                >
                                                                  <EuiToken
                                                                    aria-label="string"
                                                                    className="osdFieldIcon"
                                                                    iconType="tokenString"
                                                                    size="l"
                                                                    title="string"
                                                                  >
                                                                    <span
                                                                      className="euiToken euiToken--euiColorVis1 euiToken--square euiToken--light euiToken--large osdFieldIcon"
                                                                      style={Object {}}
                                                                    >
                                                                      <EuiIcon
                                                                        aria-label="string"
                                                                        size="l"
                                                                        title="string"
                                                                        type="tokenString"
                                                                      >
                                                                        <EuiIconEmpty
                                                                          aria-hidden={true}
                                                                          aria-label="string"
                                                                          className="euiIcon euiIcon--large euiIcon-isLoading"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                          title="string"
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            aria-label="string"
                                                                            className="euiIcon euiIcon--large euiIcon-isLoading"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          />
                                                                        </EuiIconEmpty>
                                                                      </EuiIcon>
                                                                    </span>
                                                                  </EuiToken>
                                                                </FieldIcon>
                                                              </span>
                                                              <span
                                                                className="osdFieldButton__name"
                                                              >
                                                                <span
                                                                  className="dscSidebarField__name"
                                                                  data-test-subj="field-name1"
                                                                  title="name1"
                                                                >
                                                                  name1
                                                                </span>
                                                              </span>
                                                            </button>
                                                            <div
                                                              className="osdFieldButton__fieldAction"
                                                            >
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name1 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name1"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      aria-label="Add name1 to table"
                                                                      className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall dscSidebarItem__action"
                                                                      data-test-subj="fieldToggle-name1"
                                                                      disabled={false}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiIcon
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        size="m"
                                                                        type="plusInCircleFilled"
                                                                      >
                                                                        <EuiIconEmpty
                                                                          aria-hidden={true}
                                                                          className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          />
                                                                        </EuiIconEmpty>
                                                                      </EuiIcon>
                                                                    </button>
                                                                  </EuiButtonIcon>
                                                                </span>
                                                              </EuiToolTip>
                                                            </div>
                                                          </div>
                                                        </FieldButton>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </Field>
                                              </li>
                                              <li
                                                className="dscSidebar__item"
                                                data-attr-field="name2"
                                                key="fieldname2"
                                              >
                                                <Field
                                                  field={
                                                    Object {
                                                      "name": "name2",
                                                      "type": "string",
                                                    }
                                                  }
                                                  handleOverrideTimestamp={[Function]}
                                                  isFieldToggleButtonDisabled={false}
                                                  isOverridingTimestamp={false}
                                                  onToggleField={[Function]}
                                                  query={
                                                    Object {
                                                      "0": "now-24h",
                                                      "1": "now",
                                                      "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                                                      "index": "",
                                                      "isLoaded": true,
                                                      "rawQuery": "",
                                                      "selectedTimestamp": "timestamp",
                                                      "tabCreatedType": "newTab",
                                                    }
                                                  }
                                                  selected={false}
                                                  selectedTimestamp="timestamp"
                                                  showTimestampOverrideButton={true}
                                                >
                                                  <EuiPopover
                                                    anchorPosition="rightUp"
                                                    button={
                                                      <FieldButton
                                                        className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                        dataTestSubj="field-name2-showDetails"
                                                        fieldAction={
                                                          <React.Fragment>
                                                            <EuiToolTip
                                                              content="Override default timestamp"
                                                              delay="long"
                                                              id="override-timestamp"
                                                              position="top"
                                                            >
                                                              <React.Fragment />
                                                            </EuiToolTip>
                                                            <EuiToolTip
                                                              content="Add field as column"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <React.Fragment>
                                                                <EuiButtonIcon
                                                                  aria-label="Add name2 to table"
                                                                  className="dscSidebarItem__action"
                                                                  color="primary"
                                                                  data-test-subj="fieldToggle-name2"
                                                                  iconType="plusInCircleFilled"
                                                                  onClick={[Function]}
                                                                />
                                                              </React.Fragment>
                                                            </EuiToolTip>
                                                          </React.Fragment>
                                                        }
                                                        fieldIcon={
                                                          <FieldIcon
                                                            type="string"
                                                          />
                                                        }
                                                        fieldName={
                                                          <span
                                                            className="dscSidebarField__name"
                                                            data-test-subj="field-name2"
                                                            title="name2"
                                                          >
                                                            name2
                                                          </span>
                                                        }
                                                        isActive={false}
                                                        onClick={[Function]}
                                                        size="m"
                                                      />
                                                    }
                                                    closePopover={[Function]}
                                                    display="block"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelClassName="dscSidebarItem__fieldPopoverPanel"
                                                    panelPaddingSize="m"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorRightUp euiPopover--displayBlock"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <FieldButton
                                                          className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                          dataTestSubj="field-name2-showDetails"
                                                          fieldAction={
                                                            <React.Fragment>
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <React.Fragment />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <React.Fragment>
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name2 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name2"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  />
                                                                </React.Fragment>
                                                              </EuiToolTip>
                                                            </React.Fragment>
                                                          }
                                                          fieldIcon={
                                                            <FieldIcon
                                                              type="string"
                                                            />
                                                          }
                                                          fieldName={
                                                            <span
                                                              className="dscSidebarField__name"
                                                              data-test-subj="field-name2"
                                                              title="name2"
                                                            >
                                                              name2
                                                            </span>
                                                          }
                                                          isActive={false}
                                                          onClick={[Function]}
                                                          size="m"
                                                        >
                                                          <div
                                                            className="osdFieldButton shard__fieldSelectorField explorer__fieldSelectorField"
                                                          >
                                                            <button
                                                              className="osd-resetFocusState osdFieldButton__button"
                                                              data-test-subj="field-name2-showDetails"
                                                              onClick={[Function]}
                                                            >
                                                              <span
                                                                className="osdFieldButton__fieldIcon"
                                                              >
                                                                <FieldIcon
                                                                  type="string"
                                                                >
                                                                  <EuiToken
                                                                    aria-label="string"
                                                                    className="osdFieldIcon"
                                                                    iconType="tokenString"
                                                                    size="l"
                                                                    title="string"
                                                                  >
                                                                    <span
                                                                      className="euiToken euiToken--euiColorVis1 euiToken--square euiToken--light euiToken--large osdFieldIcon"
                                                                      style={Object {}}
                                                                    >
                                                                      <EuiIcon
                                                                        aria-label="string"
                                                                        size="l"
                                                                        title="string"
                                                                        type="tokenString"
                                                                      >
                                                                        <EuiIconEmpty
                                                                          aria-hidden={true}
                                                                          aria-label="string"
                                                                          className="euiIcon euiIcon--large euiIcon-isLoading"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                          title="string"
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            aria-label="string"
                                                                            className="euiIcon euiIcon--large euiIcon-isLoading"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          />
                                                                        </EuiIconEmpty>
                                                                      </EuiIcon>
                                                                    </span>
                                                                  </EuiToken>
                                                                </FieldIcon>
                                                              </span>
                                                              <span
                                                                className="osdFieldButton__name"
                                                              >
                                                                <span
                                                                  className="dscSidebarField__name"
                                                                  data-test-subj="field-name2"
                                                                  title="name2"
                                                                >
                                                                  name2
                                                                </span>
                                                              </span>
                                                            </button>
                                                            <div
                                                              className="osdFieldButton__fieldAction"
                                                            >
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name2 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name2"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      aria-label="Add name2 to table"
                                                                      className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall dscSidebarItem__action"
                                                                      data-test-subj="fieldToggle-name2"
                                                                      disabled={false}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiIcon
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        size="m"
                                                                        type="plusInCircleFilled"
                                                                      >
                                                                        <EuiIconEmpty
                                                                          aria-hidden={true}
                                                                          className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          />
                                                                        </EuiIconEmpty>
                                                                      </EuiIcon>
                                                                    </button>
                                                                  </EuiButtonIcon>
                                                                </span>
                                                              </EuiToolTip>
                                                            </div>
                                                          </div>
                                                        </FieldButton>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </Field>
                                              </li>
                                            </ul>
                                          </div>
                                        </div>
                                      </EuiResizeObserver>
                                    </div>
                                  </div>
                                </EuiAccordion>
                              </div>
                            </section>
                          </PseudoLocaleWrapper>
                        </IntlProvider>
                      </I18nProvider>
                    </Sidebar>
                  </div>
                  <EuiButtonIcon
                    aria-controls="discover-sidebar"
                    aria-expanded="true"
                    aria-label="Toggle sidebar"
                    className="dscCollapsibleSidebar__collapseButton"
                    data-test-subj="collapseSideBarButton"
                    iconSize="m"
                    iconType="menuLeft"
                    onClick={[Function]}
                    size="s"
                  >
                    <button
                      aria-controls="discover-sidebar"
                      aria-expanded="true"
                      aria-label="Toggle sidebar"
                      className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--small dscCollapsibleSidebar__collapseButton"
                      data-test-subj="collapseSideBarButton"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                    >
                      <EuiIcon
                        aria-hidden="true"
                        className="euiButtonIcon__icon"
                        color="inherit"
                        size="m"
                        type="menuLeft"
                      >
                        <EuiIconEmpty
                          aria-hidden={true}
                          className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                          focusable="false"
                          role="img"
                          style={null}
                        >
                          <svg
                            aria-hidden={true}
                            className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                            focusable="false"
                            height={16}
                            role="img"
                            style={null}
                            viewBox="0 0 16 16"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          />
                        </EuiIconEmpty>
                      </EuiIcon>
                    </button>
                  </EuiButtonIcon>
                </div>
                <div
                  className="dscWrapper col-md-10"
                >
                  <div
                    className="dscWrapper__content"
                  >
                    <div
                      className="dscResults"
                    >
                      <EuiFlexGroup
                        alignItems="center"
                        justifyContent="center"
                      >
                        <div
                          className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                        >
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <HitsCounter
                                hits={0}
                                onResetQuery={[Function]}
                                showResetButton={false}
                              >
                                <I18nProvider>
                                  <IntlProvider
                                    defaultLocale="en"
                                    formats={
                                      Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      }
                                    }
                                    locale="en"
                                    messages={Object {}}
                                    textComponent={Symbol(react.fragment)}
                                  >
                                    <PseudoLocaleWrapper>
                                      <EuiFlexGroup
                                        alignItems="center"
                                        className="dscResultCount"
                                        gutterSize="s"
                                        justifyContent="center"
                                        responsive={false}
                                      >
                                        <div
                                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow dscResultCount"
                                        >
                                          <EuiFlexItem
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero"
                                            >
                                              <EuiText>
                                                <div
                                                  className="euiText euiText--medium"
                                                >
                                                  <strong
                                                    data-test-subj="discoverQueryHits"
                                                  >
                                                    0
                                                  </strong>
                                                   
                                                  <FormattedMessage
                                                    defaultMessage="{hits, plural, one {hit} other {hits}}"
                                                    id="discover.hitsPluralTitle"
                                                    values={
                                                      Object {
                                                        "hits": 0,
                                                      }
                                                    }
                                                  >
                                                    hits
                                                  </FormattedMessage>
                                                </div>
                                              </EuiText>
                                            </div>
                                          </EuiFlexItem>
                                        </div>
                                      </EuiFlexGroup>
                                    </PseudoLocaleWrapper>
                                  </IntlProvider>
                                </I18nProvider>
                              </HitsCounter>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <TimechartHeader
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                onChangeInterval={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "text": "Minute",
                                      "value": "m",
                                    },
                                    Object {
                                      "text": "Hour",
                                      "value": "h",
                                    },
                                    Object {
                                      "text": "Day",
                                      "value": "d",
                                    },
                                    Object {
                                      "text": "Week",
                                      "value": "w",
                                    },
                                    Object {
                                      "text": "Month",
                                      "value": "M",
                                    },
                                    Object {
                                      "text": "Year",
                                      "value": "y",
                                    },
                                  ]
                                }
                                stateInterval="auto"
                              >
                                <I18nProvider>
                                  <IntlProvider
                                    defaultLocale="en"
                                    formats={
                                      Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      }
                                    }
                                    locale="en"
                                    messages={Object {}}
                                    textComponent={Symbol(react.fragment)}
                                  >
                                    <PseudoLocaleWrapper>
                                      <EuiFlexGroup
                                        alignItems="center"
                                        gutterSize="s"
                                        justifyContent="center"
                                        responsive={true}
                                      >
                                        <div
                                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                                        >
                                          <EuiFlexItem
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero"
                                            >
                                              <EuiToolTip
                                                content="To change the time, use the global time filter above"
                                                delay="long"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <EuiText
                                                    data-test-subj="discoverIntervalDateRange"
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    size="s"
                                                  >
                                                    <div
                                                      className="euiText euiText--small"
                                                      data-test-subj="discoverIntervalDateRange"
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                    />
                                                  </EuiText>
                                                </span>
                                              </EuiToolTip>
                                            </div>
                                          </EuiFlexItem>
                                          <EuiFlexItem
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero"
                                            >
                                              <EuiSelect
                                                aria-label="Time interval"
                                                compressed={true}
                                                data-test-subj="eventAnalytics__EventIntervalSelect"
                                                id="dscResultsIntervalSelector"
                                                onChange={[Function]}
                                                options={
                                                  Array [
                                                    Object {
                                                      "text": "Minute",
                                                      "value": "m",
                                                    },
                                                    Object {
                                                      "text": "Hour",
                                                      "value": "h",
                                                    },
                                                    Object {
                                                      "text": "Day",
                                                      "value": "d",
                                                    },
                                                    Object {
                                                      "text": "Week",
                                                      "value": "w",
                                                    },
                                                    Object {
                                                      "text": "Month",
                                                      "value": "M",
                                                    },
                                                    Object {
                                                      "text": "Year",
                                                      "value": "y",
                                                    },
                                                  ]
                                                }
                                                value="m"
                                              >
                                                <EuiFormControlLayout
                                                  compressed={true}
                                                  fullWidth={false}
                                                  icon={
                                                    Object {
                                                      "side": "right",
                                                      "type": "arrowDown",
                                                    }
                                                  }
                                                  inputId="dscResultsIntervalSelector"
                                                  isLoading={false}
                                                >
                                                  <div
                                                    className="euiFormControlLayout euiFormControlLayout--compressed"
                                                  >
                                                    <div
                                                      className="euiFormControlLayout__childrenWrapper"
                                                    >
                                                      <EuiValidatableControl>
                                                        <select
                                                          aria-label="Time interval"
                                                          className="euiSelect euiSelect--compressed"
                                                          data-test-subj="eventAnalytics__EventIntervalSelect"
                                                          id="dscResultsIntervalSelector"
                                                          onChange={[Function]}
                                                          onMouseUp={[Function]}
                                                          value="m"
                                                        >
                                                          <option
                                                            key="0"
                                                            value="m"
                                                          >
                                                            Minute
                                                          </option>
                                                          <option
                                                            key="1"
                                                            value="h"
                                                          >
                                                            Hour
                                                          </option>
                                                          <option
                                                            key="2"
                                                            value="d"
                                                          >
                                                            Day
                                                          </option>
                                                          <option
                                                            key="3"
                                                            value="w"
                                                          >
                                                            Week
                                                          </option>
                                                          <option
                                                            key="4"
                                                            value="M"
                                                          >
                                                            Month
                                                          </option>
                                                          <option
                                                            key="5"
                                                            value="y"
                                                          >
                                                            Year
                                                          </option>
                                                        </select>
                                                      </EuiValidatableControl>
                                                      <EuiFormControlLayoutIcons
                                                        compressed={true}
                                                        icon={
                                                          Object {
                                                            "side": "right",
                                                            "type": "arrowDown",
                                                          }
                                                        }
                                                        isLoading={false}
                                                      >
                                                        <div
                                                          className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                                        >
                                                          <EuiFormControlLayoutCustomIcon
                                                            size="s"
                                                            type="arrowDown"
                                                          >
                                                            <span
                                                              className="euiFormControlLayoutCustomIcon"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiFormControlLayoutCustomIcon__icon"
                                                                size="s"
                                                                type="arrowDown"
                                                              >
                                                                <EuiIconEmpty
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={null}
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="euiIcon euiIcon--small euiIcon-isLoading euiFormControlLayoutCustomIcon__icon"
                                                                    focusable="false"
                                                                    height={16}
                                                                    role="img"
                                                                    style={null}
                                                                    viewBox="0 0 16 16"
                                                                    width={16}
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                  />
                                                                </EuiIconEmpty>
                                                              </EuiIcon>
                                                            </span>
                                                          </EuiFormControlLayoutCustomIcon>
                                                        </div>
                                                      </EuiFormControlLayoutIcons>
                                                    </div>
                                                  </div>
                                                </EuiFormControlLayout>
                                              </EuiSelect>
                                            </div>
                                          </EuiFlexItem>
                                        </div>
                                      </EuiFlexGroup>
                                    </PseudoLocaleWrapper>
                                  </IntlProvider>
                                </I18nProvider>
                              </TimechartHeader>
                            </div>
                          </EuiFlexItem>
                        </div>
                      </EuiFlexGroup>
                      <CountDistribution
                        countDistribution={
                          Object {
                            "data": Object {
                              "name1": Array [
                                "data11",
                                "data21",
                              ],
                              "name2": Array [
                                "data12",
                                "data22",
                              ],
                            },
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "metaData": Object {
                              "fields": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                              "size": 2,
                              "status": 200,
                            },
                          }
                        }
                      />
                      <section
                        aria-labelledby="documentsAriaLabel"
                        className="dscTable dscTableFixedScroll"
                      >
                        <h2
                          className="euiScreenReaderOnly"
                          id="documentsAriaLabel"
                        >
                          <FormattedMessage
                            defaultMessage="Documents"
                            id="discover.documentsAriaLabel"
                            values={Object {}}
                          >
                            <span>
                              Documents
                            </span>
                          </FormattedMessage>
                        </h2>
                        <div
                          className="dscDiscover"
                        >
                          <DataGrid
                            explorerFields={
                              Object {
                                "availableFields": Array [
                                  Object {
                                    "name": "name1",
                                    "type": "string",
                                  },
                                  Object {
                                    "name": "name2",
                                    "type": "string",
                                  },
                                ],
                                "queriedFields": Array [],
                                "selectedFields": Array [],
                                "unselectedFields": Array [
                                  Object {
                                    "name": "name1",
                                    "type": "string",
                                  },
                                  Object {
                                    "name": "name2",
                                    "type": "string",
                                  },
                                ],
                              }
                            }
                            http={[MockFunction]}
                            pplService={
                              Object {
                                "fetch": [MockFunction],
                                "http": [MockFunction],
                              }
                            }
                            rawQuery=""
                            rows={
                              Array [
                                Object {
                                  "name1": "data11",
                                  "name2": "data12",
                                },
                                Object {
                                  "name1": "data21",
                                  "name2": "data22",
                                },
                              ]
                            }
                            timeStampField="timestamp"
                          >
                            <div
                              className="dscTable dscTableFixedScroll"
                            >
                              <table
                                className="osd-table table"
                                data-test-subj="docTable"
                              >
                                <thead>
                                  <tr
                                    className="osdDocTableHeader"
                                  >
                                    <th
                                      key="datagrid-header-5"
                                    />
                                    <th
                                      key="datagrid-header-6"
                                    >
                                      Time
                                    </th>
                                    <th
                                      key="datagrid-header-7"
                                    >
                                      _source
                                    </th>
                                  </tr>
                                </thead>
                                <tbody>
                                  <ForwardRef
                                    doc={
                                      Object {
                                        "name1": "data11",
                                        "name2": "data12",
                                      }
                                    }
                                    docId="doc_view10"
                                    explorerFields={
                                      Object {
                                        "availableFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                        "queriedFields": Array [],
                                        "selectedFields": Array [],
                                        "unselectedFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                      }
                                    }
                                    http={[MockFunction]}
                                    key="doc_view10"
                                    onFlyoutOpen={[Function]}
                                    pplService={
                                      Object {
                                        "fetch": [MockFunction],
                                        "http": [MockFunction],
                                      }
                                    }
                                    rawQuery=""
                                    selectedCols={Array []}
                                    timeStampField="timestamp"
                                  >
                                    <tr
                                      className="osdDocTable__row"
                                    >
                                      <td
                                        className="osdDocTableCell__toggleDetails"
                                        key="grid-td-15"
                                      >
                                        <EuiButtonIcon
                                          className="euiButtonIcon euiButtonIcon--text"
                                          iconType="arrowRight"
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiButtonIcon euiButtonIcon--text"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <EuiIcon
                                              aria-hidden="true"
                                              className="euiButtonIcon__icon"
                                              color="inherit"
                                              size="m"
                                              type="arrowRight"
                                            >
                                              <EuiIconEmpty
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                />
                                              </EuiIconEmpty>
                                            </EuiIcon>
                                          </button>
                                        </EuiButtonIcon>
                                      </td>
                                      <td
                                        className="osdDocTableCell__dataField eui-textBreakAll eui-textBreakWord"
                                        key="datagrid-cell-14"
                                      >
                                        <div
                                          className="truncate-by-height"
                                        >
                                          <span>
                                            <dl
                                              className="source truncate-by-height"
                                            >
                                              <span
                                                key="grid-desc12"
                                              >
                                                <dt>
                                                  name1
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data11
                                                  </span>
                                                </dd>
                                              </span>
                                              <span
                                                key="grid-desc13"
                                              >
                                                <dt>
                                                  name2
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data12
                                                  </span>
                                                </dd>
                                              </span>
                                            </dl>
                                          </span>
                                        </div>
                                      </td>
                                    </tr>
                                  </ForwardRef>
                                  <ForwardRef
                                    doc={
                                      Object {
                                        "name1": "data21",
                                        "name2": "data22",
                                      }
                                    }
                                    docId="doc_view11"
                                    explorerFields={
                                      Object {
                                        "availableFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                        "queriedFields": Array [],
                                        "selectedFields": Array [],
                                        "unselectedFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                      }
                                    }
                                    http={[MockFunction]}
                                    key="doc_view11"
                                    onFlyoutOpen={[Function]}
                                    pplService={
                                      Object {
                                        "fetch": [MockFunction],
                                        "http": [MockFunction],
                                      }
                                    }
                                    rawQuery=""
                                    selectedCols={Array []}
                                    timeStampField="timestamp"
                                  >
                                    <tr
                                      className="osdDocTable__row"
                                    >
                                      <td
                                        className="osdDocTableCell__toggleDetails"
                                        key="grid-td-27"
                                      >
                                        <EuiButtonIcon
                                          className="euiButtonIcon euiButtonIcon--text"
                                          iconType="arrowRight"
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiButtonIcon euiButtonIcon--text"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <EuiIcon
                                              aria-hidden="true"
                                              className="euiButtonIcon__icon"
                                              color="inherit"
                                              size="m"
                                              type="arrowRight"
                                            >
                                              <EuiIconEmpty
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                />
                                              </EuiIconEmpty>
                                            </EuiIcon>
                                          </button>
                                        </EuiButtonIcon>
                                      </td>
                                      <td
                                        className="osdDocTableCell__dataField eui-textBreakAll eui-textBreakWord"
                                        key="datagrid-cell-26"
                                      >
                                        <div
                                          className="truncate-by-height"
                                        >
                                          <span>
                                            <dl
                                              className="source truncate-by-height"
                                            >
                                              <span
                                                key="grid-desc24"
                                              >
                                                <dt>
                                                  name1
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data21
                                                  </span>
                                                </dd>
                                              </span>
                                              <span
                                                key="grid-desc25"
                                              >
                                                <dt>
                                                  name2
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data22
                                                  </span>
                                                </dd>
                                              </span>
                                            </dl>
                                          </span>
                                        </div>
                                      </td>
                                    </tr>
                                  </ForwardRef>
                                </tbody>
                              </table>
                            </div>
                            <div />
                          </DataGrid>
                          <a
                            id="discoverBottomMarker"
                            tabIndex={0}
                          >
                            ​
                          </a>
                        </div>
                      </section>
                    </div>
                  </div>
                </div>
              </div>
            </main>
          </div>
        </div>
      </EuiTabbedContent>
    </div>
  </Explorer>
</Provider>
`;

exports[`Explorer component use_fetch_visualization functions called 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Explorer
    curSelectedTabId={
      Object {
        "current": undefined,
      }
    }
    dslService={
      Object {
        "fetch": [MockFunction],
        "fetchFields": [MockFunction],
        "fetchIndices": [MockFunction],
        "http": [MockFunction],
      }
    }
    history={[MockFunction]}
    http={[MockFunction]}
    notifications={
      Object {
        "toasts": Object {
          "addError": [MockFunction],
        },
      }
    }
    pplService={
      PPLService {
        "fetch": [Function],
        "http": [MockFunction],
      }
    }
    queryManager={QueryManager {}}
    savedObjectId="pomjQYQBg4Jf5lv0c5Ke"
    savedObjects={
      SavedObjects {
        "http": [MockFunction],
      }
    }
    setToast={[MockFunction]}
    tabId="pomjQYQBg4Jf5lv0c5Ke"
    timestampUtils={
      TimestampUtils {
        "dslService": Object {
          "fetch": [MockFunction],
          "fetchFields": [MockFunction],
          "fetchIndices": [MockFunction],
          "http": [MockFunction],
        },
      }
    }
  >
    <div
      className="dscAppContainer"
    >
      <Search
        baseQuery=""
        closeLiveTailPopover={[Function]}
        dslService={
          Object {
            "fetch": [MockFunction],
            "fetchFields": [MockFunction],
            "fetchIndices": [MockFunction],
            "http": [MockFunction],
          }
        }
        endTime="now"
        getSuggestions={[Function]}
        handleQueryChange={[Function]}
        handleQuerySearch={[Function]}
        handleSavingObject={[Function]}
        handleTimePickerChange={[Function]}
        handleTimeRangePickerRefresh={[Function]}
        isLiveTailOn={false}
        isLiveTailPopoverOpen={false}
        isPanelTextFieldInvalid={false}
        key="search-component"
        liveTailName="Live"
        onItemSelect={[Function]}
        popoverItems={
          Array [
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay5s"
              onClick={[Function]}
            >
              5s
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay10s"
              onClick={[Function]}
            >
              10s
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay30s"
              onClick={[Function]}
            >
              30s
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay1m"
              onClick={[Function]}
            >
              1m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay5m"
              onClick={[Function]}
            >
              5m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay15m"
              onClick={[Function]}
            >
              15m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay30m"
              onClick={[Function]}
            >
              30m
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay1h"
              onClick={[Function]}
            >
              1h
            </EuiContextMenuItem>,
            <EuiContextMenuItem
              data-test-subj="eventLiveTail__delay2h"
              onClick={[Function]}
            >
              2h
            </EuiContextMenuItem>,
          ]
        }
        query=""
        savedObjects={
          SavedObjects {
            "http": [MockFunction],
          }
        }
        selectedCustomPanelOptions={Array []}
        selectedPanelName=""
        selectedSubTabId="main-content-events"
        setIsLiveTailPopoverOpen={[Function]}
        setSelectedCustomPanelOptions={[Function]}
        setSelectedPanelName={[Function]}
        showSavePanelOptionsList={false}
        startTime="now-15m"
        stopLive={[Function]}
        tabId="pomjQYQBg4Jf5lv0c5Ke"
        tempQuery=""
      >
        <div
          className="globalQueryBar"
        >
          <EuiFlexGroup
            alignItems="flexStart"
            gutterSize="s"
            justifyContent="flexStart"
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsFlexStart euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                className="search-area"
                key="search-bar"
              >
                <div
                  className="euiFlexItem search-area"
                >
                  <Autocomplete
                    baseQuery=""
                    dslService={
                      Object {
                        "fetch": [MockFunction],
                        "fetchFields": [MockFunction],
                        "fetchIndices": [MockFunction],
                        "http": [MockFunction],
                      }
                    }
                    getSuggestions={[Function]}
                    handleQueryChange={[Function]}
                    handleQuerySearch={[Function]}
                    key="autocomplete-search-bar"
                    onItemSelect={[Function]}
                    query=""
                    tabId="pomjQYQBg4Jf5lv0c5Ke"
                    tempQuery=""
                  >
                    <div
                      aria-expanded={false}
                      aria-haspopup="listbox"
                      aria-labelledby="autocomplete-1-label"
                      className="aa-Autocomplete"
                      id="autocomplete-root"
                      role="combobox"
                    >
                      <EuiTextArea
                        aria-autocomplete="both"
                        aria-labelledby="autocomplete-1-label"
                        autoCapitalize="off"
                        autoComplete="off"
                        autoCorrect="off"
                        autoFocus={false}
                        data-test-subj="searchAutocompleteTextArea"
                        enterKeyHint="search"
                        id="autocomplete-textarea"
                        maxLength={512}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        placeholder="Enter PPL query"
                        spellCheck="false"
                        type="search"
                        value=""
                      >
                        <EuiValidatableControl>
                          <textarea
                            aria-autocomplete="both"
                            aria-labelledby="autocomplete-1-label"
                            autoCapitalize="off"
                            autoComplete="off"
                            autoCorrect="off"
                            autoFocus={false}
                            className="euiTextArea euiTextArea--resizeVertical"
                            data-test-subj="searchAutocompleteTextArea"
                            enterKeyHint="search"
                            id="autocomplete-textarea"
                            maxLength={512}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            placeholder="Enter PPL query"
                            rows={6}
                            spellCheck="false"
                            type="search"
                            value=""
                          />
                        </EuiValidatableControl>
                      </EuiTextArea>
                    </div>
                  </Autocomplete>
                  <EuiBadge
                    className="ppl-link ppl-link-light"
                    color="hollow"
                    onClick={[Function]}
                    onClickAriaLabel="pplLinkShowFlyout"
                  >
                    <EuiInnerText>
                      <button
                        aria-label="pplLinkShowFlyout"
                        className="euiBadge euiBadge-isClickable euiBadge--hollow euiBadge--iconLeft ppl-link ppl-link-light"
                        disabled={false}
                        onClick={[Function]}
                        title="PPL"
                      >
                        <span
                          className="euiBadge__content"
                        >
                          <span
                            className="euiBadge__text"
                          >
                            PPL
                          </span>
                        </span>
                      </button>
                    </EuiInnerText>
                  </EuiBadge>
                </div>
              </EuiFlexItem>
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                />
              </EuiFlexItem>
              <EuiFlexItem
                className="euiFlexItem--flexGrowZero event-date-picker"
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero euiFlexItem--flexGrowZero event-date-picker"
                >
                  <DatePicker
                    endTime="now"
                    handleTimePickerChange={[Function]}
                    handleTimeRangePickerRefresh={[Function]}
                    startTime="now-15m"
                  >
                    <EuiSuperDatePicker
                      className="osdQueryBar__datePicker"
                      commonlyUsedRanges={
                        Array [
                          Object {
                            "end": "now/d",
                            "label": "Today",
                            "start": "now/d",
                          },
                          Object {
                            "end": "now/w",
                            "label": "This week",
                            "start": "now/w",
                          },
                          Object {
                            "end": "now/M",
                            "label": "This month",
                            "start": "now/M",
                          },
                          Object {
                            "end": "now/y",
                            "label": "This year",
                            "start": "now/y",
                          },
                          Object {
                            "end": "now-1d/d",
                            "label": "Yesterday",
                            "start": "now-1d/d",
                          },
                          Object {
                            "end": "now",
                            "label": "Week to date",
                            "start": "now/w",
                          },
                          Object {
                            "end": "now",
                            "label": "Month to date",
                            "start": "now/M",
                          },
                          Object {
                            "end": "now",
                            "label": "Year to date",
                            "start": "now/y",
                          },
                        ]
                      }
                      data-test-subj="pplSearchDatePicker"
                      dateFormat=""
                      end="now"
                      isAutoRefreshOnly={false}
                      isDisabled={false}
                      isPaused={true}
                      onRefresh={[Function]}
                      onTimeChange={[Function]}
                      recentlyUsedRanges={Array []}
                      refreshInterval={0}
                      showUpdateButton={true}
                      start="now-15m"
                      timeFormat="HH:mm"
                    >
                      <EuiFlexGroup
                        className="euiSuperDatePicker__flexWrapper"
                        gutterSize="s"
                        responsive={false}
                      >
                        <div
                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--directionRow euiSuperDatePicker__flexWrapper"
                        >
                          <EuiFlexItem>
                            <div
                              className="euiFlexItem"
                            >
                              <EuiFormControlLayout
                                className="euiSuperDatePicker"
                                isDisabled={false}
                                prepend={
                                  <EuiQuickSelectPopover
                                    applyTime={[Function]}
                                    commonlyUsedRanges={
                                      Array [
                                        Object {
                                          "end": "now/d",
                                          "label": "Today",
                                          "start": "now/d",
                                        },
                                        Object {
                                          "end": "now/w",
                                          "label": "This week",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now/M",
                                          "label": "This month",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now/y",
                                          "label": "This year",
                                          "start": "now/y",
                                        },
                                        Object {
                                          "end": "now-1d/d",
                                          "label": "Yesterday",
                                          "start": "now-1d/d",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Week to date",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Month to date",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Year to date",
                                          "start": "now/y",
                                        },
                                      ]
                                    }
                                    dateFormat=""
                                    end="now"
                                    isAutoRefreshOnly={false}
                                    isDisabled={false}
                                    isPaused={true}
                                    recentlyUsedRanges={Array []}
                                    refreshInterval={0}
                                    start="now-15m"
                                  />
                                }
                              >
                                <div
                                  className="euiFormControlLayout euiFormControlLayout--group euiSuperDatePicker"
                                >
                                  <EuiQuickSelectPopover
                                    applyTime={[Function]}
                                    className="euiFormControlLayout__prepend"
                                    commonlyUsedRanges={
                                      Array [
                                        Object {
                                          "end": "now/d",
                                          "label": "Today",
                                          "start": "now/d",
                                        },
                                        Object {
                                          "end": "now/w",
                                          "label": "This week",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now/M",
                                          "label": "This month",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now/y",
                                          "label": "This year",
                                          "start": "now/y",
                                        },
                                        Object {
                                          "end": "now-1d/d",
                                          "label": "Yesterday",
                                          "start": "now-1d/d",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Week to date",
                                          "start": "now/w",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Month to date",
                                          "start": "now/M",
                                        },
                                        Object {
                                          "end": "now",
                                          "label": "Year to date",
                                          "start": "now/y",
                                        },
                                      ]
                                    }
                                    dateFormat=""
                                    end="now"
                                    isAutoRefreshOnly={false}
                                    isDisabled={false}
                                    isPaused={true}
                                    key="0/.0"
                                    recentlyUsedRanges={Array []}
                                    refreshInterval={0}
                                    start="now-15m"
                                  >
                                    <EuiPopover
                                      anchorClassName="euiQuickSelectPopover__anchor"
                                      anchorPosition="downLeft"
                                      button={
                                        <EuiButtonEmpty
                                          aria-label="Date quick select"
                                          className="euiFormControlLayout__prepend"
                                          data-test-subj="superDatePickerToggleQuickMenuButton"
                                          iconSide="right"
                                          iconType="arrowDown"
                                          isDisabled={false}
                                          onClick={[Function]}
                                          size="xs"
                                          textProps={
                                            Object {
                                              "className": "euiQuickSelectPopover__buttonText",
                                            }
                                          }
                                        >
                                          <EuiIcon
                                            type="calendar"
                                          />
                                        </EuiButtonEmpty>
                                      }
                                      closePopover={[Function]}
                                      display="inlineBlock"
                                      hasArrow={true}
                                      isOpen={false}
                                      ownFocus={true}
                                      panelPaddingSize="m"
                                    >
                                      <div
                                        className="euiPopover euiPopover--anchorDownLeft"
                                      >
                                        <div
                                          className="euiPopover__anchor euiQuickSelectPopover__anchor"
                                        >
                                          <EuiButtonEmpty
                                            aria-label="Date quick select"
                                            className="euiFormControlLayout__prepend"
                                            data-test-subj="superDatePickerToggleQuickMenuButton"
                                            iconSide="right"
                                            iconType="arrowDown"
                                            isDisabled={false}
                                            onClick={[Function]}
                                            size="xs"
                                            textProps={
                                              Object {
                                                "className": "euiQuickSelectPopover__buttonText",
                                              }
                                            }
                                          >
                                            <button
                                              aria-label="Date quick select"
                                              className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiFormControlLayout__prepend"
                                              data-test-subj="superDatePickerToggleQuickMenuButton"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <EuiButtonContent
                                                className="euiButtonEmpty__content"
                                                iconSide="right"
                                                iconSize="s"
                                                iconType="arrowDown"
                                                textProps={
                                                  Object {
                                                    "className": "euiButtonEmpty__text euiQuickSelectPopover__buttonText",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                >
                                                  <EuiIcon
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    size="s"
                                                    type="arrowDown"
                                                  >
                                                    <EuiIconArrowDown
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                      focusable="false"
                                                      role="img"
                                                      style={null}
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--small euiIcon--inherit euiButtonContent__icon"
                                                        focusable="false"
                                                        height={16}
                                                        role="img"
                                                        style={null}
                                                        viewBox="0 0 16 16"
                                                        width={16}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <path
                                                          d="M13.069 5.157L8.384 9.768a.546.546 0 01-.768 0L2.93 5.158a.552.552 0 00-.771 0 .53.53 0 000 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 000-.76.552.552 0 00-.771 0z"
                                                          fillRule="non-zero"
                                                        />
                                                      </svg>
                                                    </EuiIconArrowDown>
                                                  </EuiIcon>
                                                  <span
                                                    className="euiButtonEmpty__text euiQuickSelectPopover__buttonText"
                                                  >
                                                    <EuiIcon
                                                      type="calendar"
                                                    >
                                                      <EuiIconCalendar
                                                        aria-hidden={true}
                                                        className="euiIcon euiIcon--medium"
                                                        focusable="false"
                                                        role="img"
                                                        style={null}
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="euiIcon euiIcon--medium"
                                                          focusable="false"
                                                          height={16}
                                                          role="img"
                                                          style={null}
                                                          viewBox="0 0 16 16"
                                                          width={16}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <path
                                                            d="M14 4v-.994C14 2.45 13.55 2 12.994 2H11v1h-1V2H6v1H5V2H3.006C2.45 2 2 2.45 2 3.006v9.988C2 13.55 2.45 14 3.006 14h9.988C13.55 14 14 13.55 14 12.994V5H2V4h12zm-3-3h1.994C14.102 1 15 1.897 15 3.006v9.988A2.005 2.005 0 0112.994 15H3.006A2.005 2.005 0 011 12.994V3.006C1 1.898 1.897 1 3.006 1H5V0h1v1h4V0h1v1zM4 7h2v1H4V7zm3 0h2v1H7V7zm3 0h2v1h-2V7zM4 9h2v1H4V9zm3 0h2v1H7V9zm3 0h2v1h-2V9zm-6 2h2v1H4v-1zm3 0h2v1H7v-1zm3 0h2v1h-2v-1z"
                                                            fillRule="evenodd"
                                                          />
                                                        </svg>
                                                      </EuiIconCalendar>
                                                    </EuiIcon>
                                                  </span>
                                                </span>
                                              </EuiButtonContent>
                                            </button>
                                          </EuiButtonEmpty>
                                        </div>
                                      </div>
                                    </EuiPopover>
                                  </EuiQuickSelectPopover>
                                  <div
                                    className="euiFormControlLayout__childrenWrapper"
                                  >
                                    <EuiDatePickerRange
                                      className="euiDatePickerRange--inGroup"
                                      endDateControl={<div />}
                                      iconType={false}
                                      isCustom={true}
                                      startDateControl={<div />}
                                    >
                                      <div
                                        className="euiDatePickerRange euiDatePickerRange--inGroup"
                                      >
                                        <button
                                          className="euiSuperDatePicker__prettyFormat"
                                          data-test-subj="superDatePickerShowDatesButton"
                                          disabled={false}
                                          onClick={[Function]}
                                        >
                                          Last 15 minutes
                                          <span
                                            className="euiSuperDatePicker__prettyFormatLink"
                                          >
                                            <EuiI18n
                                              default="Show dates"
                                              token="euiSuperDatePicker.showDatesButtonLabel"
                                            >
                                              Show dates
                                            </EuiI18n>
                                          </span>
                                        </button>
                                      </div>
                                    </EuiDatePickerRange>
                                    <EuiFormControlLayoutIcons />
                                  </div>
                                </div>
                              </EuiFormControlLayout>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <EuiSuperUpdateButton
                                data-test-subj="superDatePickerApplyTimeButton"
                                isDisabled={false}
                                isLoading={false}
                                needsUpdate={false}
                                onClick={[Function]}
                                showTooltip={true}
                              >
                                <EuiToolTip
                                  delay="regular"
                                  position="bottom"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButton
                                      className="euiSuperUpdateButton"
                                      color="primary"
                                      data-test-subj="superDatePickerApplyTimeButton"
                                      fill={true}
                                      iconType="refresh"
                                      isDisabled={false}
                                      isLoading={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      textProps={
                                        Object {
                                          "className": "euiSuperUpdateButton__text",
                                        }
                                      }
                                    >
                                      <EuiButtonDisplay
                                        baseClassName="euiButton"
                                        className="euiSuperUpdateButton"
                                        color="primary"
                                        data-test-subj="superDatePickerApplyTimeButton"
                                        disabled={false}
                                        element="button"
                                        fill={true}
                                        iconType="refresh"
                                        isDisabled={false}
                                        isLoading={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        textProps={
                                          Object {
                                            "className": "euiSuperUpdateButton__text",
                                          }
                                        }
                                        type="button"
                                      >
                                        <button
                                          className="euiButton euiButton--primary euiButton--fill euiSuperUpdateButton"
                                          data-test-subj="superDatePickerApplyTimeButton"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          style={
                                            Object {
                                              "minWidth": undefined,
                                            }
                                          }
                                          type="button"
                                        >
                                          <EuiButtonContent
                                            className="euiButton__content"
                                            iconSide="left"
                                            iconType="refresh"
                                            isLoading={false}
                                            textProps={
                                              Object {
                                                "className": "euiButton__text euiSuperUpdateButton__text",
                                              }
                                            }
                                          >
                                            <span
                                              className="euiButtonContent euiButton__content"
                                            >
                                              <EuiIcon
                                                className="euiButtonContent__icon"
                                                color="inherit"
                                                size="m"
                                                type="refresh"
                                              >
                                                <EuiIconRefresh
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                  focusable="false"
                                                  role="img"
                                                  style={null}
                                                >
                                                  <svg
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                                    focusable="false"
                                                    height={16}
                                                    role="img"
                                                    style={null}
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <path
                                                      d="M11.228 2.942a.5.5 0 11-.538.842A5 5 0 1013 8a.5.5 0 111 0 6 6 0 11-2.772-5.058zM14 1.5v3A1.5 1.5 0 0112.5 6h-3a.5.5 0 010-1h3a.5.5 0 00.5-.5v-3a.5.5 0 111 0z"
                                                    />
                                                  </svg>
                                                </EuiIconRefresh>
                                              </EuiIcon>
                                              <span
                                                className="euiButton__text euiSuperUpdateButton__text"
                                              >
                                                <EuiI18n
                                                  default="Refresh"
                                                  token="euiSuperUpdateButton.refreshButtonLabel"
                                                >
                                                  Refresh
                                                </EuiI18n>
                                              </span>
                                            </span>
                                          </EuiButtonContent>
                                        </button>
                                      </EuiButtonDisplay>
                                    </EuiButton>
                                  </span>
                                </EuiToolTip>
                              </EuiSuperUpdateButton>
                            </div>
                          </EuiFlexItem>
                        </div>
                      </EuiFlexGroup>
                    </EuiSuperDatePicker>
                  </DatePicker>
                </div>
              </EuiFlexItem>
              <EuiFlexItem
                className="euiFlexItem--flexGrowZero live-tail"
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero live-tail"
                >
                  <EuiPopover
                    anchorPosition="downCenter"
                    button={
                      <LiveTailButton
                        dataTestSubj="eventLiveTail"
                        isLiveTailOn={false}
                        isLiveTailPopoverOpen={false}
                        liveTailName="Live"
                        setIsLiveTailPopoverOpen={[Function]}
                      />
                    }
                    closePopover={[Function]}
                    display="inlineBlock"
                    hasArrow={true}
                    isOpen={false}
                    ownFocus={true}
                    panelPaddingSize="none"
                  >
                    <div
                      className="euiPopover euiPopover--anchorDownCenter"
                    >
                      <div
                        className="euiPopover__anchor"
                      >
                        <LiveTailButton
                          dataTestSubj="eventLiveTail"
                          isLiveTailOn={false}
                          isLiveTailPopoverOpen={false}
                          liveTailName="Live"
                          setIsLiveTailPopoverOpen={[Function]}
                        >
                          <EuiButton
                            data-test-subj="eventLiveTail"
                            iconSide="left"
                            iconType="play"
                            onClick={[Function]}
                          >
                            <EuiButtonDisplay
                              baseClassName="euiButton"
                              data-test-subj="eventLiveTail"
                              disabled={false}
                              element="button"
                              iconSide="left"
                              iconType="play"
                              isDisabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="euiButton euiButton--primary"
                                data-test-subj="eventLiveTail"
                                disabled={false}
                                onClick={[Function]}
                                style={
                                  Object {
                                    "minWidth": undefined,
                                  }
                                }
                                type="button"
                              >
                                <EuiButtonContent
                                  className="euiButton__content"
                                  iconSide="left"
                                  iconType="play"
                                  textProps={
                                    Object {
                                      "className": "euiButton__text",
                                    }
                                  }
                                >
                                  <span
                                    className="euiButtonContent euiButton__content"
                                  >
                                    <EuiIcon
                                      className="euiButtonContent__icon"
                                      color="inherit"
                                      size="m"
                                      type="play"
                                    >
                                      <EuiIconPlay
                                        aria-hidden={true}
                                        className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                        focusable="false"
                                        role="img"
                                        style={null}
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonContent__icon"
                                          focusable="false"
                                          height={16}
                                          role="img"
                                          style={null}
                                          viewBox="0 0 16 16"
                                          width={16}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M4.608 3.063C4.345 2.895 4 3.089 4 3.418v9.167c0 .329.345.523.608.356l7.2-4.584a.426.426 0 000-.711l-7.2-4.583zm.538-.844l7.2 4.583a1.426 1.426 0 010 2.399l-7.2 4.583C4.21 14.38 3 13.696 3 12.585V3.418C3 2.307 4.21 1.624 5.146 2.22z"
                                          />
                                        </svg>
                                      </EuiIconPlay>
                                    </EuiIcon>
                                    <span
                                      className="euiButton__text"
                                    >
                                      Live
                                    </span>
                                  </span>
                                </EuiButtonContent>
                              </button>
                            </EuiButtonDisplay>
                          </EuiButton>
                        </LiveTailButton>
                      </div>
                    </div>
                  </EuiPopover>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
        </div>
      </Search>
      <EuiTabbedContent
        autoFocus="initial"
        className="mainContentTabs"
        initialSelectedTab={
          Object {
            "content": <React.Fragment>
              <main
                className="container-fluid"
              >
                <div
                  className="row"
                >
                  <div
                    className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                    data-test-subj="eventExplorer__sidebar"
                    id="discover-sidebar"
                  >
                    <div
                      className="explorerFieldSelector"
                    >
                      <Sidebar
                        explorerData={
                          Object {
                            "dataRows": Array [
                              Array [
                                "data11",
                                "data12",
                              ],
                              Array [
                                "data21",
                                "data22",
                              ],
                            ],
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "schema": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "size": 200,
                            "total": 200,
                          }
                        }
                        explorerFields={
                          Object {
                            "availableFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "queriedFields": Array [],
                            "selectedFields": Array [],
                            "unselectedFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                          }
                        }
                        handleAddField={[Function]}
                        handleOverrideTimestamp={[Function]}
                        handleRemoveField={[Function]}
                        isFieldToggleButtonDisabled={false}
                        isOverridingTimestamp={false}
                        query={
                          Object {
                            "0": "now-24h",
                            "1": "now",
                            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                            "index": "",
                            "isLoaded": true,
                            "rawQuery": "",
                            "selectedTimestamp": "timestamp",
                            "tabCreatedType": "newTab",
                          }
                        }
                        selectedTimestamp="timestamp"
                      />
                    </div>
                    <EuiButtonIcon
                      aria-controls="discover-sidebar"
                      aria-expanded="true"
                      aria-label="Toggle sidebar"
                      className="dscCollapsibleSidebar__collapseButton"
                      data-test-subj="collapseSideBarButton"
                      iconSize="m"
                      iconType="menuLeft"
                      onClick={[Function]}
                      size="s"
                    />
                  </div>
                  <div
                    className="dscWrapper col-md-10"
                  >
                    <div
                      className="dscWrapper__content"
                    >
                      <div
                        className="dscResults"
                      >
                        <React.Fragment>
                          <EuiFlexGroup
                            alignItems="center"
                            justifyContent="center"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <HitsCounter
                                hits={0}
                                onResetQuery={[Function]}
                                showResetButton={false}
                              />
                            </EuiFlexItem>
                            <EuiFlexItem
                              grow={false}
                            >
                              <TimechartHeader
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                onChangeInterval={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "text": "Minute",
                                      "value": "m",
                                    },
                                    Object {
                                      "text": "Hour",
                                      "value": "h",
                                    },
                                    Object {
                                      "text": "Day",
                                      "value": "d",
                                    },
                                    Object {
                                      "text": "Week",
                                      "value": "w",
                                    },
                                    Object {
                                      "text": "Month",
                                      "value": "M",
                                    },
                                    Object {
                                      "text": "Year",
                                      "value": "y",
                                    },
                                  ]
                                }
                                stateInterval="auto"
                              />
                            </EuiFlexItem>
                          </EuiFlexGroup>
                          <CountDistribution
                            countDistribution={
                              Object {
                                "data": Object {
                                  "name1": Array [
                                    "data11",
                                    "data21",
                                  ],
                                  "name2": Array [
                                    "data12",
                                    "data22",
                                  ],
                                },
                                "jsonData": Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ],
                                "metaData": Object {
                                  "fields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "size": 2,
                                  "status": 200,
                                },
                              }
                            }
                          />
                        </React.Fragment>
                        <section
                          aria-labelledby="documentsAriaLabel"
                          className="dscTable dscTableFixedScroll"
                        >
                          <h2
                            className="euiScreenReaderOnly"
                            id="documentsAriaLabel"
                          >
                            <FormattedMessage
                              defaultMessage="Documents"
                              id="discover.documentsAriaLabel"
                              values={Object {}}
                            />
                          </h2>
                          <div
                            className="dscDiscover"
                          >
                            <DataGrid
                              explorerFields={
                                Object {
                                  "availableFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "queriedFields": Array [],
                                  "selectedFields": Array [],
                                  "unselectedFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                }
                              }
                              http={[MockFunction]}
                              pplService={
                                PPLService {
                                  "fetch": [Function],
                                  "http": [MockFunction],
                                }
                              }
                              rawQuery=""
                              rows={
                                Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ]
                              }
                              timeStampField="timestamp"
                            />
                            <a
                              id="discoverBottomMarker"
                              tabIndex={0}
                            >
                              ​
                            </a>
                          </div>
                        </section>
                      </div>
                    </div>
                  </div>
                </div>
              </main>
            </React.Fragment>,
            "id": "main-content-events",
            "name": <React.Fragment>
              <EuiText
                color="default"
                data-test-subj="main-content-eventsTab"
                size="s"
                textAlign="left"
              >
                <span
                  className="tab-title"
                >
                  Events
                </span>
              </EuiText>
            </React.Fragment>,
          }
        }
        onTabClick={[Function]}
        selectedTab={
          Object {
            "content": <React.Fragment>
              <main
                className="container-fluid"
              >
                <div
                  className="row"
                >
                  <div
                    className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                    data-test-subj="eventExplorer__sidebar"
                    id="discover-sidebar"
                  >
                    <div
                      className="explorerFieldSelector"
                    >
                      <Sidebar
                        explorerData={
                          Object {
                            "dataRows": Array [
                              Array [
                                "data11",
                                "data12",
                              ],
                              Array [
                                "data21",
                                "data22",
                              ],
                            ],
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "schema": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "size": 200,
                            "total": 200,
                          }
                        }
                        explorerFields={
                          Object {
                            "availableFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "queriedFields": Array [],
                            "selectedFields": Array [],
                            "unselectedFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                          }
                        }
                        handleAddField={[Function]}
                        handleOverrideTimestamp={[Function]}
                        handleRemoveField={[Function]}
                        isFieldToggleButtonDisabled={false}
                        isOverridingTimestamp={false}
                        query={
                          Object {
                            "0": "now-24h",
                            "1": "now",
                            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                            "index": "",
                            "isLoaded": true,
                            "rawQuery": "",
                            "selectedTimestamp": "timestamp",
                            "tabCreatedType": "newTab",
                          }
                        }
                        selectedTimestamp="timestamp"
                      />
                    </div>
                    <EuiButtonIcon
                      aria-controls="discover-sidebar"
                      aria-expanded="true"
                      aria-label="Toggle sidebar"
                      className="dscCollapsibleSidebar__collapseButton"
                      data-test-subj="collapseSideBarButton"
                      iconSize="m"
                      iconType="menuLeft"
                      onClick={[Function]}
                      size="s"
                    />
                  </div>
                  <div
                    className="dscWrapper col-md-10"
                  >
                    <div
                      className="dscWrapper__content"
                    >
                      <div
                        className="dscResults"
                      >
                        <React.Fragment>
                          <EuiFlexGroup
                            alignItems="center"
                            justifyContent="center"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <HitsCounter
                                hits={0}
                                onResetQuery={[Function]}
                                showResetButton={false}
                              />
                            </EuiFlexItem>
                            <EuiFlexItem
                              grow={false}
                            >
                              <TimechartHeader
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                onChangeInterval={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "text": "Minute",
                                      "value": "m",
                                    },
                                    Object {
                                      "text": "Hour",
                                      "value": "h",
                                    },
                                    Object {
                                      "text": "Day",
                                      "value": "d",
                                    },
                                    Object {
                                      "text": "Week",
                                      "value": "w",
                                    },
                                    Object {
                                      "text": "Month",
                                      "value": "M",
                                    },
                                    Object {
                                      "text": "Year",
                                      "value": "y",
                                    },
                                  ]
                                }
                                stateInterval="auto"
                              />
                            </EuiFlexItem>
                          </EuiFlexGroup>
                          <CountDistribution
                            countDistribution={
                              Object {
                                "data": Object {
                                  "name1": Array [
                                    "data11",
                                    "data21",
                                  ],
                                  "name2": Array [
                                    "data12",
                                    "data22",
                                  ],
                                },
                                "jsonData": Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ],
                                "metaData": Object {
                                  "fields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "size": 2,
                                  "status": 200,
                                },
                              }
                            }
                          />
                        </React.Fragment>
                        <section
                          aria-labelledby="documentsAriaLabel"
                          className="dscTable dscTableFixedScroll"
                        >
                          <h2
                            className="euiScreenReaderOnly"
                            id="documentsAriaLabel"
                          >
                            <FormattedMessage
                              defaultMessage="Documents"
                              id="discover.documentsAriaLabel"
                              values={Object {}}
                            />
                          </h2>
                          <div
                            className="dscDiscover"
                          >
                            <DataGrid
                              explorerFields={
                                Object {
                                  "availableFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                  "queriedFields": Array [],
                                  "selectedFields": Array [],
                                  "unselectedFields": Array [
                                    Object {
                                      "name": "name1",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "name2",
                                      "type": "string",
                                    },
                                  ],
                                }
                              }
                              http={[MockFunction]}
                              pplService={
                                PPLService {
                                  "fetch": [Function],
                                  "http": [MockFunction],
                                }
                              }
                              rawQuery=""
                              rows={
                                Array [
                                  Object {
                                    "name1": "data11",
                                    "name2": "data12",
                                  },
                                  Object {
                                    "name1": "data21",
                                    "name2": "data22",
                                  },
                                ]
                              }
                              timeStampField="timestamp"
                            />
                            <a
                              id="discoverBottomMarker"
                              tabIndex={0}
                            >
                              ​
                            </a>
                          </div>
                        </section>
                      </div>
                    </div>
                  </div>
                </div>
              </main>
            </React.Fragment>,
            "id": "main-content-events",
            "name": <React.Fragment>
              <EuiText
                color="default"
                data-test-subj="main-content-eventsTab"
                size="s"
                textAlign="left"
              >
                <span
                  className="tab-title"
                >
                  Events
                </span>
              </EuiText>
            </React.Fragment>,
          }
        }
        tabs={
          Array [
            Object {
              "content": <React.Fragment>
                <main
                  className="container-fluid"
                >
                  <div
                    className="row"
                  >
                    <div
                      className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                      data-test-subj="eventExplorer__sidebar"
                      id="discover-sidebar"
                    >
                      <div
                        className="explorerFieldSelector"
                      >
                        <Sidebar
                          explorerData={
                            Object {
                              "dataRows": Array [
                                Array [
                                  "data11",
                                  "data12",
                                ],
                                Array [
                                  "data21",
                                  "data22",
                                ],
                              ],
                              "jsonData": Array [
                                Object {
                                  "name1": "data11",
                                  "name2": "data12",
                                },
                                Object {
                                  "name1": "data21",
                                  "name2": "data22",
                                },
                              ],
                              "schema": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                              "size": 200,
                              "total": 200,
                            }
                          }
                          explorerFields={
                            Object {
                              "availableFields": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                              "queriedFields": Array [],
                              "selectedFields": Array [],
                              "unselectedFields": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                            }
                          }
                          handleAddField={[Function]}
                          handleOverrideTimestamp={[Function]}
                          handleRemoveField={[Function]}
                          isFieldToggleButtonDisabled={false}
                          isOverridingTimestamp={false}
                          query={
                            Object {
                              "0": "now-24h",
                              "1": "now",
                              "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                              "index": "",
                              "isLoaded": true,
                              "rawQuery": "",
                              "selectedTimestamp": "timestamp",
                              "tabCreatedType": "newTab",
                            }
                          }
                          selectedTimestamp="timestamp"
                        />
                      </div>
                      <EuiButtonIcon
                        aria-controls="discover-sidebar"
                        aria-expanded="true"
                        aria-label="Toggle sidebar"
                        className="dscCollapsibleSidebar__collapseButton"
                        data-test-subj="collapseSideBarButton"
                        iconSize="m"
                        iconType="menuLeft"
                        onClick={[Function]}
                        size="s"
                      />
                    </div>
                    <div
                      className="dscWrapper col-md-10"
                    >
                      <div
                        className="dscWrapper__content"
                      >
                        <div
                          className="dscResults"
                        >
                          <React.Fragment>
                            <EuiFlexGroup
                              alignItems="center"
                              justifyContent="center"
                            >
                              <EuiFlexItem
                                grow={false}
                              >
                                <HitsCounter
                                  hits={0}
                                  onResetQuery={[Function]}
                                  showResetButton={false}
                                />
                              </EuiFlexItem>
                              <EuiFlexItem
                                grow={false}
                              >
                                <TimechartHeader
                                  dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                  onChangeInterval={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "text": "Minute",
                                        "value": "m",
                                      },
                                      Object {
                                        "text": "Hour",
                                        "value": "h",
                                      },
                                      Object {
                                        "text": "Day",
                                        "value": "d",
                                      },
                                      Object {
                                        "text": "Week",
                                        "value": "w",
                                      },
                                      Object {
                                        "text": "Month",
                                        "value": "M",
                                      },
                                      Object {
                                        "text": "Year",
                                        "value": "y",
                                      },
                                    ]
                                  }
                                  stateInterval="auto"
                                />
                              </EuiFlexItem>
                            </EuiFlexGroup>
                            <CountDistribution
                              countDistribution={
                                Object {
                                  "data": Object {
                                    "name1": Array [
                                      "data11",
                                      "data21",
                                    ],
                                    "name2": Array [
                                      "data12",
                                      "data22",
                                    ],
                                  },
                                  "jsonData": Array [
                                    Object {
                                      "name1": "data11",
                                      "name2": "data12",
                                    },
                                    Object {
                                      "name1": "data21",
                                      "name2": "data22",
                                    },
                                  ],
                                  "metaData": Object {
                                    "fields": Array [
                                      Object {
                                        "name": "name1",
                                        "type": "string",
                                      },
                                      Object {
                                        "name": "name2",
                                        "type": "string",
                                      },
                                    ],
                                    "size": 2,
                                    "status": 200,
                                  },
                                }
                              }
                            />
                          </React.Fragment>
                          <section
                            aria-labelledby="documentsAriaLabel"
                            className="dscTable dscTableFixedScroll"
                          >
                            <h2
                              className="euiScreenReaderOnly"
                              id="documentsAriaLabel"
                            >
                              <FormattedMessage
                                defaultMessage="Documents"
                                id="discover.documentsAriaLabel"
                                values={Object {}}
                              />
                            </h2>
                            <div
                              className="dscDiscover"
                            >
                              <DataGrid
                                explorerFields={
                                  Object {
                                    "availableFields": Array [
                                      Object {
                                        "name": "name1",
                                        "type": "string",
                                      },
                                      Object {
                                        "name": "name2",
                                        "type": "string",
                                      },
                                    ],
                                    "queriedFields": Array [],
                                    "selectedFields": Array [],
                                    "unselectedFields": Array [
                                      Object {
                                        "name": "name1",
                                        "type": "string",
                                      },
                                      Object {
                                        "name": "name2",
                                        "type": "string",
                                      },
                                    ],
                                  }
                                }
                                http={[MockFunction]}
                                pplService={
                                  PPLService {
                                    "fetch": [Function],
                                    "http": [MockFunction],
                                  }
                                }
                                rawQuery=""
                                rows={
                                  Array [
                                    Object {
                                      "name1": "data11",
                                      "name2": "data12",
                                    },
                                    Object {
                                      "name1": "data21",
                                      "name2": "data22",
                                    },
                                  ]
                                }
                                timeStampField="timestamp"
                              />
                              <a
                                id="discoverBottomMarker"
                                tabIndex={0}
                              >
                                ​
                              </a>
                            </div>
                          </section>
                        </div>
                      </div>
                    </div>
                  </div>
                </main>
              </React.Fragment>,
              "id": "main-content-events",
              "name": <React.Fragment>
                <EuiText
                  color="default"
                  data-test-subj="main-content-eventsTab"
                  size="s"
                  textAlign="left"
                >
                  <span
                    className="tab-title"
                  >
                    Events
                  </span>
                </EuiText>
              </React.Fragment>,
            },
            Object {
              "content": <React.Fragment>
                <ExplorerVisualizations
                  callback={[Function]}
                  curVisId="bar"
                  explorerData={
                    Object {
                      "dataRows": Array [
                        Array [
                          "data11",
                          "data12",
                        ],
                        Array [
                          "data21",
                          "data22",
                        ],
                      ],
                      "jsonData": Array [
                        Object {
                          "name1": "data11",
                          "name2": "data12",
                        },
                        Object {
                          "name1": "data21",
                          "name2": "data22",
                        },
                      ],
                      "schema": Array [
                        Object {
                          "name": "name1",
                          "type": "string",
                        },
                        Object {
                          "name": "name2",
                          "type": "string",
                        },
                      ],
                      "size": 200,
                      "total": 200,
                    }
                  }
                  explorerFields={
                    Object {
                      "availableFields": Array [
                        Object {
                          "name": "name1",
                          "type": "string",
                        },
                        Object {
                          "name": "name2",
                          "type": "string",
                        },
                      ],
                      "queriedFields": Array [],
                      "selectedFields": Array [],
                      "unselectedFields": Array [
                        Object {
                          "name": "name1",
                          "type": "string",
                        },
                        Object {
                          "name": "name2",
                          "type": "string",
                        },
                      ],
                    }
                  }
                  handleAddField={[Function]}
                  handleOverrideTimestamp={[Function]}
                  handleRemoveField={[Function]}
                  query={
                    Object {
                      "0": "now-24h",
                      "1": "now",
                      "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                      "index": "",
                      "isLoaded": true,
                      "rawQuery": "",
                      "selectedTimestamp": "timestamp",
                      "tabCreatedType": "newTab",
                    }
                  }
                  queryManager={QueryManager {}}
                  setCurVisId={[Function]}
                  visualizations={
                    Object {
                      "data": Object {
                        "appData": Object {
                          "fromApp": false,
                        },
                        "defaultAxes": Object {},
                        "explorer": Object {
                          "explorerData": Object {
                            "dataRows": Array [
                              Array [
                                "data11",
                                "data12",
                              ],
                              Array [
                                "data21",
                                "data22",
                              ],
                            ],
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "schema": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "size": 200,
                            "total": 200,
                          },
                          "explorerFields": Object {
                            "availableFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                            "queriedFields": Array [],
                            "selectedFields": Array [],
                            "unselectedFields": Array [
                              Object {
                                "name": "name1",
                                "type": "string",
                              },
                              Object {
                                "name": "name2",
                                "type": "string",
                              },
                            ],
                          },
                          "http": [MockFunction],
                          "pplService": PPLService {
                            "fetch": [Function],
                            "http": [MockFunction],
                          },
                          "query": Object {
                            "0": "now-24h",
                            "1": "now",
                            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                            "index": "",
                            "isLoaded": true,
                            "rawQuery": "",
                            "selectedTimestamp": "timestamp",
                            "tabCreatedType": "newTab",
                          },
                        },
                        "indexFields": Object {
                          "availableFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                          "queriedFields": Array [],
                          "selectedFields": Array [],
                          "unselectedFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                        },
                        "query": Object {
                          "0": "now-24h",
                          "1": "now",
                          "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                          "index": "",
                          "isLoaded": true,
                          "rawQuery": "",
                          "selectedTimestamp": "timestamp",
                          "tabCreatedType": "newTab",
                        },
                        "rawVizData": Object {},
                        "userConfigs": Object {},
                      },
                      "vis": Object {
                        "barwidth": 0.97,
                        "category": "Visualizations",
                        "categoryaxis": "xaxis",
                        "component": [Function],
                        "editorconfig": Object {
                          "panelTabs": Array [
                            Object {
                              "editor": [Function],
                              "id": "data-panel",
                              "mapTo": "dataConfig",
                              "name": "Style",
                              "sections": Array [
                                Object {
                                  "editor": [Function],
                                  "id": "tooltip_options",
                                  "mapTo": "tooltipOptions",
                                  "name": "Tooltip options",
                                  "schemas": Array [
                                    Object {
                                      "component": null,
                                      "mapTo": "tooltipMode",
                                      "name": "Tooltip mode",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                          Object {
                                            "id": "hidden",
                                            "name": "Hidden",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": null,
                                      "mapTo": "tooltipText",
                                      "name": "Tooltip text",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "all",
                                            "name": "All",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "all",
                                            "name": "All",
                                          },
                                          Object {
                                            "id": "x",
                                            "name": "Dimension",
                                          },
                                          Object {
                                            "id": "y",
                                            "name": "Series",
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                Object {
                                  "editor": [Function],
                                  "id": "legend",
                                  "mapTo": "legend",
                                  "name": "Legend",
                                  "schemas": Array [
                                    Object {
                                      "component": null,
                                      "mapTo": "showLegend",
                                      "name": "Show legend",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "show",
                                            "name": "Show",
                                          },
                                          Object {
                                            "id": "hidden",
                                            "name": "Hidden",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": null,
                                      "mapTo": "position",
                                      "name": "Position",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "v",
                                            "name": "Right",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "v",
                                            "name": "Right",
                                          },
                                          Object {
                                            "id": "h",
                                            "name": "Bottom",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "eleType": "input",
                                      "mapTo": "legendSize",
                                      "name": "Legend size",
                                      "title": "Legend size",
                                    },
                                  ],
                                },
                                Object {
                                  "editor": [Function],
                                  "id": "chart_styles",
                                  "mapTo": "chartStyles",
                                  "name": "Chart styles",
                                  "schemas": Array [
                                    Object {
                                      "component": [Function],
                                      "eleType": "buttons",
                                      "mapTo": "mode",
                                      "name": "Mode",
                                      "props": Object {
                                        "defaultSelections": Array [
                                          Object {
                                            "id": "group",
                                            "name": "Group",
                                          },
                                        ],
                                        "options": Array [
                                          Object {
                                            "id": "group",
                                            "name": "Group",
                                          },
                                          Object {
                                            "id": "stack",
                                            "name": "Stack",
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "eleType": "input",
                                      "mapTo": "labelSize",
                                      "name": "Label size",
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 0,
                                      "eleType": "slider",
                                      "mapTo": "rotateBarLabels",
                                      "name": "Rotate bar labels",
                                      "props": Object {
                                        "max": 90,
                                        "min": -90,
                                        "showTicks": true,
                                        "ticks": Array [
                                          Object {
                                            "label": "-90°",
                                            "value": -90,
                                          },
                                          Object {
                                            "label": "-45°",
                                            "value": -45,
                                          },
                                          Object {
                                            "label": "0°",
                                            "value": 0,
                                          },
                                          Object {
                                            "label": "45°",
                                            "value": 45,
                                          },
                                          Object {
                                            "label": "90°",
                                            "value": 90,
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 0.7,
                                      "eleType": "slider",
                                      "mapTo": "groupWidth",
                                      "name": "Group width",
                                      "props": Object {
                                        "max": 1,
                                        "step": 0.01,
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 0.97,
                                      "eleType": "slider",
                                      "mapTo": "barWidth",
                                      "name": "Bar width",
                                      "props": Object {
                                        "max": 1,
                                        "step": 0.01,
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 2,
                                      "eleType": "slider",
                                      "mapTo": "lineWidth",
                                      "name": "Line width",
                                      "props": Object {
                                        "max": 10,
                                      },
                                    },
                                    Object {
                                      "component": [Function],
                                      "defaultState": 70,
                                      "eleType": "slider",
                                      "mapTo": "fillOpacity",
                                      "name": "Fill opacity",
                                      "props": Object {
                                        "max": 100,
                                      },
                                    },
                                  ],
                                },
                                Object {
                                  "editor": [Function],
                                  "id": "color-theme",
                                  "mapTo": "colorTheme",
                                  "name": "Color theme",
                                  "schemas": Array [],
                                },
                              ],
                            },
                            Object {
                              "editor": [Function],
                              "id": "availability-panel",
                              "mapTo": "availabilityConfig",
                              "name": "Availability",
                            },
                          ],
                        },
                        "fillopacity": 70,
                        "fulllabel": "Vertical bar",
                        "groupwidth": 0.7,
                        "icon": [Function],
                        "icontype": "visBarVerticalStacked",
                        "id": "bar",
                        "label": "Vertical bar",
                        "labelangle": 0,
                        "legendposition": "v",
                        "linewidth": 2,
                        "mode": "group",
                        "name": "bar",
                        "orientation": "v",
                        "selection": Object {
                          "dataLoss": "nothing",
                        },
                        "seriesaxis": "yaxis",
                        "showlegend": "show",
                        "type": "bar",
                        "visconfig": Object {
                          "config": Object {
                            "displaylogo": false,
                            "responsive": true,
                          },
                          "isUniColor": false,
                          "layout": Object {
                            "height": 1180,
                            "legend": Object {
                              "orientation": "v",
                              "traceorder": "normal",
                            },
                            "margin": Object {
                              "b": 30,
                              "l": 60,
                              "pad": 0,
                              "r": 30,
                              "t": 50,
                            },
                            "showlegend": true,
                          },
                        },
                      },
                    }
                  }
                />
              </React.Fragment>,
              "id": "main-content-vis",
              "name": <React.Fragment>
                <EuiText
                  color="default"
                  data-test-subj="main-content-visTab"
                  size="s"
                  textAlign="left"
                >
                  <span
                    className="tab-title"
                  >
                    Visualizations
                  </span>
                </EuiText>
              </React.Fragment>,
            },
          ]
        }
      >
        <div
          className="mainContentTabs"
        >
          <EuiTabs
            onFocus={[Function]}
          >
            <div
              className="euiTabs"
              onFocus={[Function]}
              role="tablist"
            >
              <EuiTab
                aria-controls="random_html_id"
                id="main-content-events"
                isSelected={true}
                key="main-content-events"
                onClick={[Function]}
              >
                <button
                  aria-controls="random_html_id"
                  aria-selected={true}
                  className="euiTab euiTab-isSelected"
                  disabled={false}
                  id="main-content-events"
                  onClick={[Function]}
                  role="tab"
                  type="button"
                >
                  <span
                    className="euiTab__content"
                  >
                    <EuiText
                      color="default"
                      data-test-subj="main-content-eventsTab"
                      size="s"
                      textAlign="left"
                    >
                      <div
                        className="euiText euiText--small"
                        data-test-subj="main-content-eventsTab"
                      >
                        <EuiTextAlign
                          textAlign="left"
                        >
                          <div
                            className="euiTextAlign euiTextAlign--left"
                          >
                            <EuiTextColor
                              color="default"
                              component="div"
                            >
                              <div
                                className="euiTextColor euiTextColor--default"
                              >
                                <span
                                  className="tab-title"
                                >
                                  Events
                                </span>
                              </div>
                            </EuiTextColor>
                          </div>
                        </EuiTextAlign>
                      </div>
                    </EuiText>
                  </span>
                </button>
              </EuiTab>
              <EuiTab
                aria-controls="random_html_id"
                id="main-content-vis"
                isSelected={false}
                key="main-content-vis"
                onClick={[Function]}
              >
                <button
                  aria-controls="random_html_id"
                  aria-selected={false}
                  className="euiTab"
                  disabled={false}
                  id="main-content-vis"
                  onClick={[Function]}
                  role="tab"
                  type="button"
                >
                  <span
                    className="euiTab__content"
                  >
                    <EuiText
                      color="default"
                      data-test-subj="main-content-visTab"
                      size="s"
                      textAlign="left"
                    >
                      <div
                        className="euiText euiText--small"
                        data-test-subj="main-content-visTab"
                      >
                        <EuiTextAlign
                          textAlign="left"
                        >
                          <div
                            className="euiTextAlign euiTextAlign--left"
                          >
                            <EuiTextColor
                              color="default"
                              component="div"
                            >
                              <div
                                className="euiTextColor euiTextColor--default"
                              >
                                <span
                                  className="tab-title"
                                >
                                  Visualizations
                                </span>
                              </div>
                            </EuiTextColor>
                          </div>
                        </EuiTextAlign>
                      </div>
                    </EuiText>
                  </span>
                </button>
              </EuiTab>
            </div>
          </EuiTabs>
          <div
            aria-labelledby="main-content-events"
            id="random_html_id"
            role="tabpanel"
          >
            <main
              className="container-fluid"
            >
              <div
                className="row"
              >
                <div
                  className="col-md-2 dscSidebar__container dscCollapsibleSidebar "
                  data-test-subj="eventExplorer__sidebar"
                  id="discover-sidebar"
                >
                  <div
                    className="explorerFieldSelector"
                  >
                    <Sidebar
                      explorerData={
                        Object {
                          "dataRows": Array [
                            Array [
                              "data11",
                              "data12",
                            ],
                            Array [
                              "data21",
                              "data22",
                            ],
                          ],
                          "jsonData": Array [
                            Object {
                              "name1": "data11",
                              "name2": "data12",
                            },
                            Object {
                              "name1": "data21",
                              "name2": "data22",
                            },
                          ],
                          "schema": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                          "size": 200,
                          "total": 200,
                        }
                      }
                      explorerFields={
                        Object {
                          "availableFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                          "queriedFields": Array [],
                          "selectedFields": Array [],
                          "unselectedFields": Array [
                            Object {
                              "name": "name1",
                              "type": "string",
                            },
                            Object {
                              "name": "name2",
                              "type": "string",
                            },
                          ],
                        }
                      }
                      handleAddField={[Function]}
                      handleOverrideTimestamp={[Function]}
                      handleRemoveField={[Function]}
                      isFieldToggleButtonDisabled={false}
                      isOverridingTimestamp={false}
                      query={
                        Object {
                          "0": "now-24h",
                          "1": "now",
                          "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                          "index": "",
                          "isLoaded": true,
                          "rawQuery": "",
                          "selectedTimestamp": "timestamp",
                          "tabCreatedType": "newTab",
                        }
                      }
                      selectedTimestamp="timestamp"
                    >
                      <I18nProvider>
                        <IntlProvider
                          defaultLocale="en"
                          formats={
                            Object {
                              "date": Object {
                                "full": Object {
                                  "day": "numeric",
                                  "month": "long",
                                  "weekday": "long",
                                  "year": "numeric",
                                },
                                "long": Object {
                                  "day": "numeric",
                                  "month": "long",
                                  "year": "numeric",
                                },
                                "medium": Object {
                                  "day": "numeric",
                                  "month": "short",
                                  "year": "numeric",
                                },
                                "short": Object {
                                  "day": "numeric",
                                  "month": "numeric",
                                  "year": "2-digit",
                                },
                              },
                              "number": Object {
                                "currency": Object {
                                  "style": "currency",
                                },
                                "percent": Object {
                                  "style": "percent",
                                },
                              },
                              "relative": Object {
                                "days": Object {
                                  "units": "day",
                                },
                                "hours": Object {
                                  "units": "hour",
                                },
                                "minutes": Object {
                                  "units": "minute",
                                },
                                "months": Object {
                                  "units": "month",
                                },
                                "seconds": Object {
                                  "units": "second",
                                },
                                "years": Object {
                                  "units": "year",
                                },
                              },
                              "time": Object {
                                "full": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                  "second": "numeric",
                                  "timeZoneName": "short",
                                },
                                "long": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                  "second": "numeric",
                                  "timeZoneName": "short",
                                },
                                "medium": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                  "second": "numeric",
                                },
                                "short": Object {
                                  "hour": "numeric",
                                  "minute": "numeric",
                                },
                              },
                            }
                          }
                          locale="en"
                          messages={Object {}}
                          textComponent={Symbol(react.fragment)}
                        >
                          <PseudoLocaleWrapper>
                            <section
                              className="sidebar-list"
                            >
                              <div
                                className="dscSidebar__item"
                              >
                                <EuiFieldSearch
                                  compressed={true}
                                  data-test-subj="eventExplorer__sidebarSearch"
                                  fullWidth={true}
                                  incremental={false}
                                  isClearable={true}
                                  isLoading={false}
                                  onChange={[Function]}
                                  placeholder="Search field names"
                                  value=""
                                >
                                  <EuiFormControlLayout
                                    compressed={true}
                                    fullWidth={true}
                                    icon="search"
                                    isLoading={false}
                                  >
                                    <div
                                      className="euiFormControlLayout euiFormControlLayout--fullWidth euiFormControlLayout--compressed"
                                    >
                                      <div
                                        className="euiFormControlLayout__childrenWrapper"
                                      >
                                        <EuiValidatableControl>
                                          <input
                                            className="euiFieldSearch euiFieldSearch--fullWidth euiFieldSearch--compressed"
                                            data-test-subj="eventExplorer__sidebarSearch"
                                            onChange={[Function]}
                                            onKeyUp={[Function]}
                                            placeholder="Search field names"
                                            type="search"
                                            value=""
                                          />
                                        </EuiValidatableControl>
                                        <EuiFormControlLayoutIcons
                                          compressed={true}
                                          icon="search"
                                          isLoading={false}
                                        >
                                          <div
                                            className="euiFormControlLayoutIcons"
                                          >
                                            <EuiFormControlLayoutCustomIcon
                                              size="s"
                                              type="search"
                                            >
                                              <span
                                                className="euiFormControlLayoutCustomIcon"
                                              >
                                                <EuiIcon
                                                  aria-hidden="true"
                                                  className="euiFormControlLayoutCustomIcon__icon"
                                                  size="s"
                                                  type="search"
                                                >
                                                  <EuiIconSearch
                                                    aria-hidden={true}
                                                    className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                    focusable="false"
                                                    role="img"
                                                    style={null}
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                      focusable="false"
                                                      height={16}
                                                      role="img"
                                                      style={null}
                                                      viewBox="0 0 16 16"
                                                      width={16}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M11.271 11.978l3.872 3.873a.502.502 0 00.708 0 .502.502 0 000-.708l-3.565-3.564c2.38-2.747 2.267-6.923-.342-9.532-2.73-2.73-7.17-2.73-9.898 0-2.728 2.729-2.728 7.17 0 9.9a6.955 6.955 0 004.949 2.05.5.5 0 000-1 5.96 5.96 0 01-4.242-1.757 6.01 6.01 0 010-8.486c2.337-2.34 6.143-2.34 8.484 0a6.01 6.01 0 010 8.486.5.5 0 00.034.738z"
                                                      />
                                                    </svg>
                                                  </EuiIconSearch>
                                                </EuiIcon>
                                              </span>
                                            </EuiFormControlLayoutCustomIcon>
                                          </div>
                                        </EuiFormControlLayoutIcons>
                                      </div>
                                    </div>
                                  </EuiFormControlLayout>
                                </EuiFieldSearch>
                              </div>
                              <EuiSpacer
                                size="s"
                              >
                                <div
                                  className="euiSpacer euiSpacer--s"
                                />
                              </EuiSpacer>
                              <div
                                className="sidebar-list"
                              >
                                <EuiSpacer
                                  size="s"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--s"
                                  />
                                </EuiSpacer>
                                <EuiAccordion
                                  arrowDisplay="left"
                                  buttonContent={
                                    <EuiTitle
                                      size="xxxs"
                                    >
                                      <span>
                                        Selected Fields
                                      </span>
                                    </EuiTitle>
                                  }
                                  id="fieldSelector__selectedFields"
                                  initialIsOpen={true}
                                  isLoading={false}
                                  isLoadingMessage={false}
                                  paddingSize="xs"
                                >
                                  <div
                                    className="euiAccordion euiAccordion-isOpen"
                                  >
                                    <div
                                      className="euiAccordion__triggerWrapper"
                                    >
                                      <button
                                        aria-controls="fieldSelector__selectedFields"
                                        aria-expanded={true}
                                        className="euiAccordion__button"
                                        id="random_html_id"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <span
                                          className="euiAccordion__iconWrapper"
                                        >
                                          <EuiIcon
                                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                                            size="m"
                                            type="arrowRight"
                                          >
                                            <EuiIconArrowRight
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiAccordion__icon euiAccordion__icon-isOpen"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiAccordion__icon euiAccordion__icon-isOpen"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  d="M5.157 13.069l4.611-4.685a.546.546 0 000-.768L5.158 2.93a.552.552 0 010-.771.53.53 0 01.759 0l4.61 4.684c.631.641.63 1.672 0 2.312l-4.61 4.684a.53.53 0 01-.76 0 .552.552 0 010-.771z"
                                                  fillRule="nonzero"
                                                />
                                              </svg>
                                            </EuiIconArrowRight>
                                          </EuiIcon>
                                        </span>
                                        <span
                                          className="euiIEFlexWrapFix"
                                        >
                                          <EuiTitle
                                            size="xxxs"
                                          >
                                            <span
                                              className="euiTitle euiTitle--xxxsmall"
                                            >
                                              Selected Fields
                                            </span>
                                          </EuiTitle>
                                        </span>
                                      </button>
                                    </div>
                                    <div
                                      aria-labelledby="random_html_id"
                                      className="euiAccordion__childWrapper"
                                      id="fieldSelector__selectedFields"
                                      role="region"
                                      tabIndex={-1}
                                    >
                                      <EuiResizeObserver
                                        onResize={[Function]}
                                      >
                                        <div>
                                          <div
                                            className="euiAccordion__padding--xs"
                                          >
                                            <ul
                                              aria-labelledby="selected_fields"
                                              className="dscSidebarList dscFieldList--selected"
                                              data-test-subj="fieldList-selected"
                                            />
                                          </div>
                                        </div>
                                      </EuiResizeObserver>
                                    </div>
                                  </div>
                                </EuiAccordion>
                                <EuiSpacer
                                  size="s"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--s"
                                  />
                                </EuiSpacer>
                                <EuiAccordion
                                  arrowDisplay="left"
                                  buttonContent={
                                    <EuiTitle
                                      size="xxxs"
                                    >
                                      <span>
                                        Available Fields
                                      </span>
                                    </EuiTitle>
                                  }
                                  id="fieldSelector__availableFields"
                                  initialIsOpen={true}
                                  isLoading={false}
                                  isLoadingMessage={false}
                                  paddingSize="xs"
                                >
                                  <div
                                    className="euiAccordion euiAccordion-isOpen"
                                  >
                                    <div
                                      className="euiAccordion__triggerWrapper"
                                    >
                                      <button
                                        aria-controls="fieldSelector__availableFields"
                                        aria-expanded={true}
                                        className="euiAccordion__button"
                                        id="random_html_id"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <span
                                          className="euiAccordion__iconWrapper"
                                        >
                                          <EuiIcon
                                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                                            size="m"
                                            type="arrowRight"
                                          >
                                            <EuiIconArrowRight
                                              aria-hidden={true}
                                              className="euiIcon euiIcon--medium euiAccordion__icon euiAccordion__icon-isOpen"
                                              focusable="false"
                                              role="img"
                                              style={null}
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiAccordion__icon euiAccordion__icon-isOpen"
                                                focusable="false"
                                                height={16}
                                                role="img"
                                                style={null}
                                                viewBox="0 0 16 16"
                                                width={16}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <path
                                                  d="M5.157 13.069l4.611-4.685a.546.546 0 000-.768L5.158 2.93a.552.552 0 010-.771.53.53 0 01.759 0l4.61 4.684c.631.641.63 1.672 0 2.312l-4.61 4.684a.53.53 0 01-.76 0 .552.552 0 010-.771z"
                                                  fillRule="nonzero"
                                                />
                                              </svg>
                                            </EuiIconArrowRight>
                                          </EuiIcon>
                                        </span>
                                        <span
                                          className="euiIEFlexWrapFix"
                                        >
                                          <EuiTitle
                                            size="xxxs"
                                          >
                                            <span
                                              className="euiTitle euiTitle--xxxsmall"
                                            >
                                              Available Fields
                                            </span>
                                          </EuiTitle>
                                        </span>
                                      </button>
                                    </div>
                                    <div
                                      aria-labelledby="random_html_id"
                                      className="euiAccordion__childWrapper"
                                      id="fieldSelector__availableFields"
                                      role="region"
                                      tabIndex={-1}
                                    >
                                      <EuiResizeObserver
                                        onResize={[Function]}
                                      >
                                        <div>
                                          <div
                                            className="euiAccordion__padding--xs"
                                          >
                                            <ul
                                              aria-labelledby="available_fields"
                                              className="dscFieldList dscFieldList--unpopular hidden-sm hidden-xs"
                                              data-test-subj="fieldList-unpopular"
                                            >
                                              <li
                                                className="dscSidebar__item"
                                                data-attr-field="name1"
                                                key="fieldname1"
                                              >
                                                <Field
                                                  field={
                                                    Object {
                                                      "name": "name1",
                                                      "type": "string",
                                                    }
                                                  }
                                                  handleOverrideTimestamp={[Function]}
                                                  isFieldToggleButtonDisabled={false}
                                                  isOverridingTimestamp={false}
                                                  onToggleField={[Function]}
                                                  query={
                                                    Object {
                                                      "0": "now-24h",
                                                      "1": "now",
                                                      "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                                                      "index": "",
                                                      "isLoaded": true,
                                                      "rawQuery": "",
                                                      "selectedTimestamp": "timestamp",
                                                      "tabCreatedType": "newTab",
                                                    }
                                                  }
                                                  selected={false}
                                                  selectedTimestamp="timestamp"
                                                  showTimestampOverrideButton={true}
                                                >
                                                  <EuiPopover
                                                    anchorPosition="rightUp"
                                                    button={
                                                      <FieldButton
                                                        className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                        dataTestSubj="field-name1-showDetails"
                                                        fieldAction={
                                                          <React.Fragment>
                                                            <EuiToolTip
                                                              content="Override default timestamp"
                                                              delay="long"
                                                              id="override-timestamp"
                                                              position="top"
                                                            >
                                                              <React.Fragment />
                                                            </EuiToolTip>
                                                            <EuiToolTip
                                                              content="Add field as column"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <React.Fragment>
                                                                <EuiButtonIcon
                                                                  aria-label="Add name1 to table"
                                                                  className="dscSidebarItem__action"
                                                                  color="primary"
                                                                  data-test-subj="fieldToggle-name1"
                                                                  iconType="plusInCircleFilled"
                                                                  onClick={[Function]}
                                                                />
                                                              </React.Fragment>
                                                            </EuiToolTip>
                                                          </React.Fragment>
                                                        }
                                                        fieldIcon={
                                                          <FieldIcon
                                                            type="string"
                                                          />
                                                        }
                                                        fieldName={
                                                          <span
                                                            className="dscSidebarField__name"
                                                            data-test-subj="field-name1"
                                                            title="name1"
                                                          >
                                                            name1
                                                          </span>
                                                        }
                                                        isActive={false}
                                                        onClick={[Function]}
                                                        size="m"
                                                      />
                                                    }
                                                    closePopover={[Function]}
                                                    display="block"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelClassName="dscSidebarItem__fieldPopoverPanel"
                                                    panelPaddingSize="m"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorRightUp euiPopover--displayBlock"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <FieldButton
                                                          className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                          dataTestSubj="field-name1-showDetails"
                                                          fieldAction={
                                                            <React.Fragment>
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <React.Fragment />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <React.Fragment>
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name1 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name1"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  />
                                                                </React.Fragment>
                                                              </EuiToolTip>
                                                            </React.Fragment>
                                                          }
                                                          fieldIcon={
                                                            <FieldIcon
                                                              type="string"
                                                            />
                                                          }
                                                          fieldName={
                                                            <span
                                                              className="dscSidebarField__name"
                                                              data-test-subj="field-name1"
                                                              title="name1"
                                                            >
                                                              name1
                                                            </span>
                                                          }
                                                          isActive={false}
                                                          onClick={[Function]}
                                                          size="m"
                                                        >
                                                          <div
                                                            className="osdFieldButton shard__fieldSelectorField explorer__fieldSelectorField"
                                                          >
                                                            <button
                                                              className="osd-resetFocusState osdFieldButton__button"
                                                              data-test-subj="field-name1-showDetails"
                                                              onClick={[Function]}
                                                            >
                                                              <span
                                                                className="osdFieldButton__fieldIcon"
                                                              >
                                                                <FieldIcon
                                                                  type="string"
                                                                >
                                                                  <EuiToken
                                                                    aria-label="string"
                                                                    className="osdFieldIcon"
                                                                    iconType="tokenString"
                                                                    size="l"
                                                                    title="string"
                                                                  >
                                                                    <span
                                                                      className="euiToken euiToken--euiColorVis1 euiToken--square euiToken--light euiToken--large osdFieldIcon"
                                                                      style={Object {}}
                                                                    >
                                                                      <EuiIcon
                                                                        aria-label="string"
                                                                        size="l"
                                                                        title="string"
                                                                        type="tokenString"
                                                                      >
                                                                        <EuiIconTokenString
                                                                          aria-label="string"
                                                                          className="euiIcon euiIcon--large"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                          title="string"
                                                                        >
                                                                          <svg
                                                                            aria-label="string"
                                                                            className="euiIcon euiIcon--large"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <title>
                                                                              string
                                                                            </title>
                                                                            <path
                                                                              d="M9.147 4.297l-.255 1.455h.936l-.222 1.266h-.935l-.455 2.688c-.025.184-.013.323.036.417.048.093.17.144.365.151.075.004.23-.005.465-.027l-.13 1.32c-.3.097-.618.142-.957.135-.552-.007-.965-.17-1.239-.487-.274-.317-.386-.748-.335-1.293l.476-2.904h-.725l.216-1.266h.725l.254-1.455h1.78z"
                                                                            />
                                                                          </svg>
                                                                        </EuiIconTokenString>
                                                                      </EuiIcon>
                                                                    </span>
                                                                  </EuiToken>
                                                                </FieldIcon>
                                                              </span>
                                                              <span
                                                                className="osdFieldButton__name"
                                                              >
                                                                <span
                                                                  className="dscSidebarField__name"
                                                                  data-test-subj="field-name1"
                                                                  title="name1"
                                                                >
                                                                  name1
                                                                </span>
                                                              </span>
                                                            </button>
                                                            <div
                                                              className="osdFieldButton__fieldAction"
                                                            >
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name1 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name1"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      aria-label="Add name1 to table"
                                                                      className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall dscSidebarItem__action"
                                                                      data-test-subj="fieldToggle-name1"
                                                                      disabled={false}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiIcon
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        size="m"
                                                                        type="plusInCircleFilled"
                                                                      >
                                                                        <EuiIconPlusInCircleFilled
                                                                          aria-hidden={true}
                                                                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <path
                                                                              d="M8 7V3.5a.5.5 0 00-1 0V7H3.5a.5.5 0 000 1H7v3.5a.5.5 0 101 0V8h3.5a.5.5 0 100-1H8zm-.5 8a7.5 7.5 0 110-15 7.5 7.5 0 010 15z"
                                                                            />
                                                                          </svg>
                                                                        </EuiIconPlusInCircleFilled>
                                                                      </EuiIcon>
                                                                    </button>
                                                                  </EuiButtonIcon>
                                                                </span>
                                                              </EuiToolTip>
                                                            </div>
                                                          </div>
                                                        </FieldButton>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </Field>
                                              </li>
                                              <li
                                                className="dscSidebar__item"
                                                data-attr-field="name2"
                                                key="fieldname2"
                                              >
                                                <Field
                                                  field={
                                                    Object {
                                                      "name": "name2",
                                                      "type": "string",
                                                    }
                                                  }
                                                  handleOverrideTimestamp={[Function]}
                                                  isFieldToggleButtonDisabled={false}
                                                  isOverridingTimestamp={false}
                                                  onToggleField={[Function]}
                                                  query={
                                                    Object {
                                                      "0": "now-24h",
                                                      "1": "now",
                                                      "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2022-11-08 09:03:50' and timestamp <= '2022-11-09 09:03:50' ",
                                                      "index": "",
                                                      "isLoaded": true,
                                                      "rawQuery": "",
                                                      "selectedTimestamp": "timestamp",
                                                      "tabCreatedType": "newTab",
                                                    }
                                                  }
                                                  selected={false}
                                                  selectedTimestamp="timestamp"
                                                  showTimestampOverrideButton={true}
                                                >
                                                  <EuiPopover
                                                    anchorPosition="rightUp"
                                                    button={
                                                      <FieldButton
                                                        className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                        dataTestSubj="field-name2-showDetails"
                                                        fieldAction={
                                                          <React.Fragment>
                                                            <EuiToolTip
                                                              content="Override default timestamp"
                                                              delay="long"
                                                              id="override-timestamp"
                                                              position="top"
                                                            >
                                                              <React.Fragment />
                                                            </EuiToolTip>
                                                            <EuiToolTip
                                                              content="Add field as column"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <React.Fragment>
                                                                <EuiButtonIcon
                                                                  aria-label="Add name2 to table"
                                                                  className="dscSidebarItem__action"
                                                                  color="primary"
                                                                  data-test-subj="fieldToggle-name2"
                                                                  iconType="plusInCircleFilled"
                                                                  onClick={[Function]}
                                                                />
                                                              </React.Fragment>
                                                            </EuiToolTip>
                                                          </React.Fragment>
                                                        }
                                                        fieldIcon={
                                                          <FieldIcon
                                                            type="string"
                                                          />
                                                        }
                                                        fieldName={
                                                          <span
                                                            className="dscSidebarField__name"
                                                            data-test-subj="field-name2"
                                                            title="name2"
                                                          >
                                                            name2
                                                          </span>
                                                        }
                                                        isActive={false}
                                                        onClick={[Function]}
                                                        size="m"
                                                      />
                                                    }
                                                    closePopover={[Function]}
                                                    display="block"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelClassName="dscSidebarItem__fieldPopoverPanel"
                                                    panelPaddingSize="m"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorRightUp euiPopover--displayBlock"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <FieldButton
                                                          className="shard__fieldSelectorField explorer__fieldSelectorField"
                                                          dataTestSubj="field-name2-showDetails"
                                                          fieldAction={
                                                            <React.Fragment>
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <React.Fragment />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <React.Fragment>
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name2 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name2"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  />
                                                                </React.Fragment>
                                                              </EuiToolTip>
                                                            </React.Fragment>
                                                          }
                                                          fieldIcon={
                                                            <FieldIcon
                                                              type="string"
                                                            />
                                                          }
                                                          fieldName={
                                                            <span
                                                              className="dscSidebarField__name"
                                                              data-test-subj="field-name2"
                                                              title="name2"
                                                            >
                                                              name2
                                                            </span>
                                                          }
                                                          isActive={false}
                                                          onClick={[Function]}
                                                          size="m"
                                                        >
                                                          <div
                                                            className="osdFieldButton shard__fieldSelectorField explorer__fieldSelectorField"
                                                          >
                                                            <button
                                                              className="osd-resetFocusState osdFieldButton__button"
                                                              data-test-subj="field-name2-showDetails"
                                                              onClick={[Function]}
                                                            >
                                                              <span
                                                                className="osdFieldButton__fieldIcon"
                                                              >
                                                                <FieldIcon
                                                                  type="string"
                                                                >
                                                                  <EuiToken
                                                                    aria-label="string"
                                                                    className="osdFieldIcon"
                                                                    iconType="tokenString"
                                                                    size="l"
                                                                    title="string"
                                                                  >
                                                                    <span
                                                                      className="euiToken euiToken--euiColorVis1 euiToken--square euiToken--light euiToken--large osdFieldIcon"
                                                                      style={Object {}}
                                                                    >
                                                                      <EuiIcon
                                                                        aria-label="string"
                                                                        size="l"
                                                                        title="string"
                                                                        type="tokenString"
                                                                      >
                                                                        <EuiIconTokenString
                                                                          aria-label="string"
                                                                          className="euiIcon euiIcon--large"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                          title="string"
                                                                        >
                                                                          <svg
                                                                            aria-label="string"
                                                                            className="euiIcon euiIcon--large"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <title>
                                                                              string
                                                                            </title>
                                                                            <path
                                                                              d="M9.147 4.297l-.255 1.455h.936l-.222 1.266h-.935l-.455 2.688c-.025.184-.013.323.036.417.048.093.17.144.365.151.075.004.23-.005.465-.027l-.13 1.32c-.3.097-.618.142-.957.135-.552-.007-.965-.17-1.239-.487-.274-.317-.386-.748-.335-1.293l.476-2.904h-.725l.216-1.266h.725l.254-1.455h1.78z"
                                                                            />
                                                                          </svg>
                                                                        </EuiIconTokenString>
                                                                      </EuiIcon>
                                                                    </span>
                                                                  </EuiToken>
                                                                </FieldIcon>
                                                              </span>
                                                              <span
                                                                className="osdFieldButton__name"
                                                              >
                                                                <span
                                                                  className="dscSidebarField__name"
                                                                  data-test-subj="field-name2"
                                                                  title="name2"
                                                                >
                                                                  name2
                                                                </span>
                                                              </span>
                                                            </button>
                                                            <div
                                                              className="osdFieldButton__fieldAction"
                                                            >
                                                              <EuiToolTip
                                                                content="Override default timestamp"
                                                                delay="long"
                                                                id="override-timestamp"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                />
                                                              </EuiToolTip>
                                                              <EuiToolTip
                                                                content="Add field as column"
                                                                delay="long"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onKeyUp={[Function]}
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  <EuiButtonIcon
                                                                    aria-label="Add name2 to table"
                                                                    className="dscSidebarItem__action"
                                                                    color="primary"
                                                                    data-test-subj="fieldToggle-name2"
                                                                    iconType="plusInCircleFilled"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      aria-label="Add name2 to table"
                                                                      className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall dscSidebarItem__action"
                                                                      data-test-subj="fieldToggle-name2"
                                                                      disabled={false}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiIcon
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        size="m"
                                                                        type="plusInCircleFilled"
                                                                      >
                                                                        <EuiIconPlusInCircleFilled
                                                                          aria-hidden={true}
                                                                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                                          focusable="false"
                                                                          role="img"
                                                                          style={null}
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                                            focusable="false"
                                                                            height={16}
                                                                            role="img"
                                                                            style={null}
                                                                            viewBox="0 0 16 16"
                                                                            width={16}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <path
                                                                              d="M8 7V3.5a.5.5 0 00-1 0V7H3.5a.5.5 0 000 1H7v3.5a.5.5 0 101 0V8h3.5a.5.5 0 100-1H8zm-.5 8a7.5 7.5 0 110-15 7.5 7.5 0 010 15z"
                                                                            />
                                                                          </svg>
                                                                        </EuiIconPlusInCircleFilled>
                                                                      </EuiIcon>
                                                                    </button>
                                                                  </EuiButtonIcon>
                                                                </span>
                                                              </EuiToolTip>
                                                            </div>
                                                          </div>
                                                        </FieldButton>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </Field>
                                              </li>
                                            </ul>
                                          </div>
                                        </div>
                                      </EuiResizeObserver>
                                    </div>
                                  </div>
                                </EuiAccordion>
                              </div>
                            </section>
                          </PseudoLocaleWrapper>
                        </IntlProvider>
                      </I18nProvider>
                    </Sidebar>
                  </div>
                  <EuiButtonIcon
                    aria-controls="discover-sidebar"
                    aria-expanded="true"
                    aria-label="Toggle sidebar"
                    className="dscCollapsibleSidebar__collapseButton"
                    data-test-subj="collapseSideBarButton"
                    iconSize="m"
                    iconType="menuLeft"
                    onClick={[Function]}
                    size="s"
                  >
                    <button
                      aria-controls="discover-sidebar"
                      aria-expanded="true"
                      aria-label="Toggle sidebar"
                      className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--small dscCollapsibleSidebar__collapseButton"
                      data-test-subj="collapseSideBarButton"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                    >
                      <EuiIcon
                        aria-hidden="true"
                        className="euiButtonIcon__icon"
                        color="inherit"
                        size="m"
                        type="menuLeft"
                      >
                        <EuiIconMenuLeft
                          aria-hidden={true}
                          className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                          focusable="false"
                          role="img"
                          style={null}
                        >
                          <svg
                            aria-hidden={true}
                            className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                            focusable="false"
                            height={16}
                            role="img"
                            style={null}
                            viewBox="0 0 16 16"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1.014 7.382a.501.501 0 00-.013.152c-.014.4.133.806.439 1.112l2.12 2.122a.5.5 0 10.708-.708L2.208 8H14.5a.5.5 0 000-1H2.379l1.889-1.89a.5.5 0 00-.707-.706L1.44 6.524c-.241.242-.383.544-.426.858zM14.5 3h-7a.5.5 0 000 1h7a.5.5 0 000-1zm0 8h-7a.5.5 0 100 1h7a.5.5 0 100-1z"
                            />
                          </svg>
                        </EuiIconMenuLeft>
                      </EuiIcon>
                    </button>
                  </EuiButtonIcon>
                </div>
                <div
                  className="dscWrapper col-md-10"
                >
                  <div
                    className="dscWrapper__content"
                  >
                    <div
                      className="dscResults"
                    >
                      <EuiFlexGroup
                        alignItems="center"
                        justifyContent="center"
                      >
                        <div
                          className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                        >
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <HitsCounter
                                hits={0}
                                onResetQuery={[Function]}
                                showResetButton={false}
                              >
                                <I18nProvider>
                                  <IntlProvider
                                    defaultLocale="en"
                                    formats={
                                      Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      }
                                    }
                                    locale="en"
                                    messages={Object {}}
                                    textComponent={Symbol(react.fragment)}
                                  >
                                    <PseudoLocaleWrapper>
                                      <EuiFlexGroup
                                        alignItems="center"
                                        className="dscResultCount"
                                        gutterSize="s"
                                        justifyContent="center"
                                        responsive={false}
                                      >
                                        <div
                                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow dscResultCount"
                                        >
                                          <EuiFlexItem
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero"
                                            >
                                              <EuiText>
                                                <div
                                                  className="euiText euiText--medium"
                                                >
                                                  <strong
                                                    data-test-subj="discoverQueryHits"
                                                  >
                                                    0
                                                  </strong>
                                                   
                                                  <FormattedMessage
                                                    defaultMessage="{hits, plural, one {hit} other {hits}}"
                                                    id="discover.hitsPluralTitle"
                                                    values={
                                                      Object {
                                                        "hits": 0,
                                                      }
                                                    }
                                                  >
                                                    hits
                                                  </FormattedMessage>
                                                </div>
                                              </EuiText>
                                            </div>
                                          </EuiFlexItem>
                                        </div>
                                      </EuiFlexGroup>
                                    </PseudoLocaleWrapper>
                                  </IntlProvider>
                                </I18nProvider>
                              </HitsCounter>
                            </div>
                          </EuiFlexItem>
                          <EuiFlexItem
                            grow={false}
                          >
                            <div
                              className="euiFlexItem euiFlexItem--flexGrowZero"
                            >
                              <TimechartHeader
                                dateFormat="MMM D, YYYY @ HH:mm:ss.SSS"
                                onChangeInterval={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "text": "Minute",
                                      "value": "m",
                                    },
                                    Object {
                                      "text": "Hour",
                                      "value": "h",
                                    },
                                    Object {
                                      "text": "Day",
                                      "value": "d",
                                    },
                                    Object {
                                      "text": "Week",
                                      "value": "w",
                                    },
                                    Object {
                                      "text": "Month",
                                      "value": "M",
                                    },
                                    Object {
                                      "text": "Year",
                                      "value": "y",
                                    },
                                  ]
                                }
                                stateInterval="auto"
                              >
                                <I18nProvider>
                                  <IntlProvider
                                    defaultLocale="en"
                                    formats={
                                      Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      }
                                    }
                                    locale="en"
                                    messages={Object {}}
                                    textComponent={Symbol(react.fragment)}
                                  >
                                    <PseudoLocaleWrapper>
                                      <EuiFlexGroup
                                        alignItems="center"
                                        gutterSize="s"
                                        justifyContent="center"
                                        responsive={true}
                                      >
                                        <div
                                          className="euiFlexGroup euiFlexGroup--gutterSmall euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                                        >
                                          <EuiFlexItem
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero"
                                            >
                                              <EuiToolTip
                                                content="To change the time, use the global time filter above"
                                                delay="long"
                                                position="top"
                                              >
                                                <span
                                                  className="euiToolTipAnchor"
                                                  onKeyUp={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                >
                                                  <EuiText
                                                    data-test-subj="discoverIntervalDateRange"
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    size="s"
                                                  >
                                                    <div
                                                      className="euiText euiText--small"
                                                      data-test-subj="discoverIntervalDateRange"
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                    />
                                                  </EuiText>
                                                </span>
                                              </EuiToolTip>
                                            </div>
                                          </EuiFlexItem>
                                          <EuiFlexItem
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero"
                                            >
                                              <EuiSelect
                                                aria-label="Time interval"
                                                compressed={true}
                                                data-test-subj="eventAnalytics__EventIntervalSelect"
                                                id="dscResultsIntervalSelector"
                                                onChange={[Function]}
                                                options={
                                                  Array [
                                                    Object {
                                                      "text": "Minute",
                                                      "value": "m",
                                                    },
                                                    Object {
                                                      "text": "Hour",
                                                      "value": "h",
                                                    },
                                                    Object {
                                                      "text": "Day",
                                                      "value": "d",
                                                    },
                                                    Object {
                                                      "text": "Week",
                                                      "value": "w",
                                                    },
                                                    Object {
                                                      "text": "Month",
                                                      "value": "M",
                                                    },
                                                    Object {
                                                      "text": "Year",
                                                      "value": "y",
                                                    },
                                                  ]
                                                }
                                                value="m"
                                              >
                                                <EuiFormControlLayout
                                                  compressed={true}
                                                  fullWidth={false}
                                                  icon={
                                                    Object {
                                                      "side": "right",
                                                      "type": "arrowDown",
                                                    }
                                                  }
                                                  inputId="dscResultsIntervalSelector"
                                                  isLoading={false}
                                                >
                                                  <div
                                                    className="euiFormControlLayout euiFormControlLayout--compressed"
                                                  >
                                                    <div
                                                      className="euiFormControlLayout__childrenWrapper"
                                                    >
                                                      <EuiValidatableControl>
                                                        <select
                                                          aria-label="Time interval"
                                                          className="euiSelect euiSelect--compressed"
                                                          data-test-subj="eventAnalytics__EventIntervalSelect"
                                                          id="dscResultsIntervalSelector"
                                                          onChange={[Function]}
                                                          onMouseUp={[Function]}
                                                          value="m"
                                                        >
                                                          <option
                                                            key="0"
                                                            value="m"
                                                          >
                                                            Minute
                                                          </option>
                                                          <option
                                                            key="1"
                                                            value="h"
                                                          >
                                                            Hour
                                                          </option>
                                                          <option
                                                            key="2"
                                                            value="d"
                                                          >
                                                            Day
                                                          </option>
                                                          <option
                                                            key="3"
                                                            value="w"
                                                          >
                                                            Week
                                                          </option>
                                                          <option
                                                            key="4"
                                                            value="M"
                                                          >
                                                            Month
                                                          </option>
                                                          <option
                                                            key="5"
                                                            value="y"
                                                          >
                                                            Year
                                                          </option>
                                                        </select>
                                                      </EuiValidatableControl>
                                                      <EuiFormControlLayoutIcons
                                                        compressed={true}
                                                        icon={
                                                          Object {
                                                            "side": "right",
                                                            "type": "arrowDown",
                                                          }
                                                        }
                                                        isLoading={false}
                                                      >
                                                        <div
                                                          className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                                        >
                                                          <EuiFormControlLayoutCustomIcon
                                                            size="s"
                                                            type="arrowDown"
                                                          >
                                                            <span
                                                              className="euiFormControlLayoutCustomIcon"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiFormControlLayoutCustomIcon__icon"
                                                                size="s"
                                                                type="arrowDown"
                                                              >
                                                                <EuiIconArrowDown
                                                                  aria-hidden={true}
                                                                  className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                                  focusable="false"
                                                                  role="img"
                                                                  style={null}
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="euiIcon euiIcon--small euiFormControlLayoutCustomIcon__icon"
                                                                    focusable="false"
                                                                    height={16}
                                                                    role="img"
                                                                    style={null}
                                                                    viewBox="0 0 16 16"
                                                                    width={16}
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                  >
                                                                    <path
                                                                      d="M13.069 5.157L8.384 9.768a.546.546 0 01-.768 0L2.93 5.158a.552.552 0 00-.771 0 .53.53 0 000 .759l4.684 4.61c.641.631 1.672.63 2.312 0l4.684-4.61a.53.53 0 000-.76.552.552 0 00-.771 0z"
                                                                      fillRule="non-zero"
                                                                    />
                                                                  </svg>
                                                                </EuiIconArrowDown>
                                                              </EuiIcon>
                                                            </span>
                                                          </EuiFormControlLayoutCustomIcon>
                                                        </div>
                                                      </EuiFormControlLayoutIcons>
                                                    </div>
                                                  </div>
                                                </EuiFormControlLayout>
                                              </EuiSelect>
                                            </div>
                                          </EuiFlexItem>
                                        </div>
                                      </EuiFlexGroup>
                                    </PseudoLocaleWrapper>
                                  </IntlProvider>
                                </I18nProvider>
                              </TimechartHeader>
                            </div>
                          </EuiFlexItem>
                        </div>
                      </EuiFlexGroup>
                      <CountDistribution
                        countDistribution={
                          Object {
                            "data": Object {
                              "name1": Array [
                                "data11",
                                "data21",
                              ],
                              "name2": Array [
                                "data12",
                                "data22",
                              ],
                            },
                            "jsonData": Array [
                              Object {
                                "name1": "data11",
                                "name2": "data12",
                              },
                              Object {
                                "name1": "data21",
                                "name2": "data22",
                              },
                            ],
                            "metaData": Object {
                              "fields": Array [
                                Object {
                                  "name": "name1",
                                  "type": "string",
                                },
                                Object {
                                  "name": "name2",
                                  "type": "string",
                                },
                              ],
                              "size": 2,
                              "status": 200,
                            },
                          }
                        }
                      />
                      <section
                        aria-labelledby="documentsAriaLabel"
                        className="dscTable dscTableFixedScroll"
                      >
                        <h2
                          className="euiScreenReaderOnly"
                          id="documentsAriaLabel"
                        >
                          <FormattedMessage
                            defaultMessage="Documents"
                            id="discover.documentsAriaLabel"
                            values={Object {}}
                          >
                            <span>
                              Documents
                            </span>
                          </FormattedMessage>
                        </h2>
                        <div
                          className="dscDiscover"
                        >
                          <DataGrid
                            explorerFields={
                              Object {
                                "availableFields": Array [
                                  Object {
                                    "name": "name1",
                                    "type": "string",
                                  },
                                  Object {
                                    "name": "name2",
                                    "type": "string",
                                  },
                                ],
                                "queriedFields": Array [],
                                "selectedFields": Array [],
                                "unselectedFields": Array [
                                  Object {
                                    "name": "name1",
                                    "type": "string",
                                  },
                                  Object {
                                    "name": "name2",
                                    "type": "string",
                                  },
                                ],
                              }
                            }
                            http={[MockFunction]}
                            pplService={
                              PPLService {
                                "fetch": [Function],
                                "http": [MockFunction],
                              }
                            }
                            rawQuery=""
                            rows={
                              Array [
                                Object {
                                  "name1": "data11",
                                  "name2": "data12",
                                },
                                Object {
                                  "name1": "data21",
                                  "name2": "data22",
                                },
                              ]
                            }
                            timeStampField="timestamp"
                          >
                            <div
                              className="dscTable dscTableFixedScroll"
                            >
                              <table
                                className="osd-table table"
                                data-test-subj="docTable"
                              >
                                <thead>
                                  <tr
                                    className="osdDocTableHeader"
                                  >
                                    <th
                                      key="datagrid-header-39"
                                    />
                                    <th
                                      key="datagrid-header-40"
                                    >
                                      Time
                                    </th>
                                    <th
                                      key="datagrid-header-41"
                                    >
                                      _source
                                    </th>
                                  </tr>
                                </thead>
                                <tbody>
                                  <ForwardRef
                                    doc={
                                      Object {
                                        "name1": "data11",
                                        "name2": "data12",
                                      }
                                    }
                                    docId="doc_view44"
                                    explorerFields={
                                      Object {
                                        "availableFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                        "queriedFields": Array [],
                                        "selectedFields": Array [],
                                        "unselectedFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                      }
                                    }
                                    http={[MockFunction]}
                                    key="doc_view44"
                                    onFlyoutOpen={[Function]}
                                    pplService={
                                      PPLService {
                                        "fetch": [Function],
                                        "http": [MockFunction],
                                      }
                                    }
                                    rawQuery=""
                                    selectedCols={Array []}
                                    timeStampField="timestamp"
                                  >
                                    <tr
                                      className="osdDocTable__row"
                                    >
                                      <td
                                        className="osdDocTableCell__toggleDetails"
                                        key="grid-td-49"
                                      >
                                        <EuiButtonIcon
                                          className="euiButtonIcon euiButtonIcon--text"
                                          iconType="arrowRight"
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiButtonIcon euiButtonIcon--text"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <EuiIcon
                                              aria-hidden="true"
                                              className="euiButtonIcon__icon"
                                              color="inherit"
                                              size="m"
                                              type="arrowRight"
                                            >
                                              <EuiIconArrowRight
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M5.157 13.069l4.611-4.685a.546.546 0 000-.768L5.158 2.93a.552.552 0 010-.771.53.53 0 01.759 0l4.61 4.684c.631.641.63 1.672 0 2.312l-4.61 4.684a.53.53 0 01-.76 0 .552.552 0 010-.771z"
                                                    fillRule="nonzero"
                                                  />
                                                </svg>
                                              </EuiIconArrowRight>
                                            </EuiIcon>
                                          </button>
                                        </EuiButtonIcon>
                                      </td>
                                      <td
                                        className="osdDocTableCell__dataField eui-textBreakAll eui-textBreakWord"
                                        key="datagrid-cell-48"
                                      >
                                        <div
                                          className="truncate-by-height"
                                        >
                                          <span>
                                            <dl
                                              className="source truncate-by-height"
                                            >
                                              <span
                                                key="grid-desc46"
                                              >
                                                <dt>
                                                  name1
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data11
                                                  </span>
                                                </dd>
                                              </span>
                                              <span
                                                key="grid-desc47"
                                              >
                                                <dt>
                                                  name2
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data12
                                                  </span>
                                                </dd>
                                              </span>
                                            </dl>
                                          </span>
                                        </div>
                                      </td>
                                    </tr>
                                  </ForwardRef>
                                  <ForwardRef
                                    doc={
                                      Object {
                                        "name1": "data21",
                                        "name2": "data22",
                                      }
                                    }
                                    docId="doc_view45"
                                    explorerFields={
                                      Object {
                                        "availableFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                        "queriedFields": Array [],
                                        "selectedFields": Array [],
                                        "unselectedFields": Array [
                                          Object {
                                            "name": "name1",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "name2",
                                            "type": "string",
                                          },
                                        ],
                                      }
                                    }
                                    http={[MockFunction]}
                                    key="doc_view45"
                                    onFlyoutOpen={[Function]}
                                    pplService={
                                      PPLService {
                                        "fetch": [Function],
                                        "http": [MockFunction],
                                      }
                                    }
                                    rawQuery=""
                                    selectedCols={Array []}
                                    timeStampField="timestamp"
                                  >
                                    <tr
                                      className="osdDocTable__row"
                                    >
                                      <td
                                        className="osdDocTableCell__toggleDetails"
                                        key="grid-td-61"
                                      >
                                        <EuiButtonIcon
                                          className="euiButtonIcon euiButtonIcon--text"
                                          iconType="arrowRight"
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiButtonIcon euiButtonIcon--text"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <EuiIcon
                                              aria-hidden="true"
                                              className="euiButtonIcon__icon"
                                              color="inherit"
                                              size="m"
                                              type="arrowRight"
                                            >
                                              <EuiIconArrowRight
                                                aria-hidden={true}
                                                className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                focusable="false"
                                                role="img"
                                                style={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="euiIcon euiIcon--medium euiIcon--inherit euiButtonIcon__icon"
                                                  focusable="false"
                                                  height={16}
                                                  role="img"
                                                  style={null}
                                                  viewBox="0 0 16 16"
                                                  width={16}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M5.157 13.069l4.611-4.685a.546.546 0 000-.768L5.158 2.93a.552.552 0 010-.771.53.53 0 01.759 0l4.61 4.684c.631.641.63 1.672 0 2.312l-4.61 4.684a.53.53 0 01-.76 0 .552.552 0 010-.771z"
                                                    fillRule="nonzero"
                                                  />
                                                </svg>
                                              </EuiIconArrowRight>
                                            </EuiIcon>
                                          </button>
                                        </EuiButtonIcon>
                                      </td>
                                      <td
                                        className="osdDocTableCell__dataField eui-textBreakAll eui-textBreakWord"
                                        key="datagrid-cell-60"
                                      >
                                        <div
                                          className="truncate-by-height"
                                        >
                                          <span>
                                            <dl
                                              className="source truncate-by-height"
                                            >
                                              <span
                                                key="grid-desc58"
                                              >
                                                <dt>
                                                  name1
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data21
                                                  </span>
                                                </dd>
                                              </span>
                                              <span
                                                key="grid-desc59"
                                              >
                                                <dt>
                                                  name2
                                                  :
                                                </dt>
                                                <dd>
                                                  <span>
                                                    data22
                                                  </span>
                                                </dd>
                                              </span>
                                            </dl>
                                          </span>
                                        </div>
                                      </td>
                                    </tr>
                                  </ForwardRef>
                                </tbody>
                              </table>
                            </div>
                            <div />
                          </DataGrid>
                          <a
                            id="discoverBottomMarker"
                            tabIndex={0}
                          >
                            ​
                          </a>
                        </div>
                      </section>
                    </div>
                  </div>
                </div>
              </div>
            </main>
          </div>
        </div>
      </EuiTabbedContent>
    </div>
  </Explorer>
</Provider>
`;
