// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataConfigPanelItem component Renders DataConfigPanelItem component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <DataConfigPanelItem
    fieldOptionList={
      Array [
        Object {
          "label": "agent",
          "name": "agent",
          "type": "string",
        },
        Object {
          "label": "bytes",
          "name": "bytes",
          "type": "long",
        },
      ]
    }
    queryManager={QueryManager {}}
    visualizations={
      Object {
        "data": Object {
          "appData": Object {
            "fromApp": false,
          },
          "defaultAxes": Object {},
          "indexFields": Object {
            "availableFields": Array [
              Object {
                "name": "agent",
                "type": "string",
              },
              Object {
                "name": "bytes",
                "type": "long",
              },
              Object {
                "name": "clientip",
                "type": "ip",
              },
              Object {
                "name": "event",
                "type": "struct",
              },
              Object {
                "name": "extension",
                "type": "string",
              },
              Object {
                "name": "geo",
                "type": "struct",
              },
              Object {
                "name": "host",
                "type": "string",
              },
              Object {
                "name": "index",
                "type": "string",
              },
              Object {
                "name": "ip",
                "type": "ip",
              },
              Object {
                "name": "machine",
                "type": "struct",
              },
              Object {
                "name": "memory",
                "type": "double",
              },
              Object {
                "name": "message",
                "type": "string",
              },
              Object {
                "name": "phpmemory",
                "type": "long",
              },
              Object {
                "name": "referer",
                "type": "string",
              },
              Object {
                "name": "request",
                "type": "string",
              },
              Object {
                "name": "response",
                "type": "string",
              },
              Object {
                "name": "tags",
                "type": "string",
              },
              Object {
                "name": "timestamp",
                "type": "timestamp",
              },
              Object {
                "name": "url",
                "type": "string",
              },
              Object {
                "name": "utc_time",
                "type": "timestamp",
              },
            ],
            "queriedFields": Array [
              Object {
                "name": "double_per_ip_bytes",
                "type": "long",
              },
              Object {
                "name": "host",
                "type": "text",
              },
              Object {
                "name": "ip_count",
                "type": "integer",
              },
              Object {
                "name": "per_ip_bytes",
                "type": "long",
              },
              Object {
                "name": "resp_code",
                "type": "text",
              },
              Object {
                "name": "sum_bytes",
                "type": "long",
              },
            ],
            "selectedFields": Array [],
            "unselectedFields": Array [],
          },
          "query": Object {
            "finalQuery": "source=opensearch_dashboards_sample_data_logs | where timestamp >= '2021-12-31 18:30:00' and timestamp <= '2022-11-17 06:37:08' | where match(request,'filebeat')",
            "index": "",
            "isLoaded": true,
            "objectType": "savedQuery",
            "rawQuery": "source = opensearch_dashboards_sample_data_logs | where match(request,'filebeat')",
            "savedObjectId": "MM0qHYMBVusSGvW09eu2",
            "selectedDateRange": Array [
              "now/y",
              "now",
            ],
            "selectedTimestamp": "timestamp",
            "tabCreatedType": "redirect_tab",
          },
          "rawVizData": Object {
            "data": Object {
              "count()": Array [
                154,
                1753,
                116,
                468,
                1964,
                219,
              ],
              "tags": Array [
                "error",
                "info",
                "login",
                "security",
                "success",
                "warning",
              ],
            },
            "jsonData": Array [
              Object {
                "count()": 154,
                "tags": "error",
              },
              Object {
                "count()": 1753,
                "tags": "info",
              },
              Object {
                "count()": 116,
                "tags": "login",
              },
              Object {
                "count()": 468,
                "tags": "security",
              },
              Object {
                "count()": 1964,
                "tags": "success",
              },
              Object {
                "count()": 219,
                "tags": "warning",
              },
            ],
            "metadata": Object {
              "fields": Array [
                Object {
                  "name": "count()",
                  "type": "integer",
                },
                Object {
                  "name": "tags",
                  "type": "text",
                },
                Object {
                  "name": "timestamp",
                  "type": "timestamp",
                },
              ],
              "size": 6,
              "status": 200,
            },
          },
          "userConfigs": Object {
            "dataConfig": Object {
              "dimensions": Array [
                Object {
                  "label": "tags",
                  "name": "tags",
                  "type": "text",
                },
              ],
              "metrics": Array [
                Object {
                  "label": "count()",
                  "name": "count()",
                  "side": "left",
                  "type": "integer",
                },
              ],
              "series": Array [
                Object {
                  "aggregation": "sum",
                  "customLabel": "delays",
                  "label": "FlightDelayMin",
                  "name": "FlightDelayMin",
                },
              ],
            },
          },
        },
        "vis": Object {
          "barwidth": 0.97,
          "category": "Visualizations",
          "categoryaxis": "xaxis",
          "component": [Function],
          "editorconfig": Object {
            "panelTabs": Array [
              Object {
                "editor": [Function],
                "id": "data-panel",
                "mapTo": "dataConfig",
                "name": "Style",
                "sections": Array [
                  Object {
                    "editor": [Function],
                    "id": "tooltip_options",
                    "mapTo": "tooltipOptions",
                    "name": "Tooltip options",
                    "schemas": Array [
                      Object {
                        "component": null,
                        "mapTo": "tooltipMode",
                        "name": "Tooltip mode",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                            Object {
                              "id": "hidden",
                              "name": "Hidden",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": null,
                        "mapTo": "tooltipText",
                        "name": "Tooltip text",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "all",
                              "name": "All",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "all",
                              "name": "All",
                            },
                            Object {
                              "id": "x",
                              "name": "Dimension",
                            },
                            Object {
                              "id": "y",
                              "name": "Series",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "editor": [Function],
                    "id": "legend",
                    "mapTo": "legend",
                    "name": "Legend",
                    "schemas": Array [
                      Object {
                        "component": null,
                        "mapTo": "showLegend",
                        "name": "Show legend",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "show",
                              "name": "Show",
                            },
                            Object {
                              "id": "hidden",
                              "name": "Hidden",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": null,
                        "mapTo": "position",
                        "name": "Position",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "v",
                              "name": "Right",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "v",
                              "name": "Right",
                            },
                            Object {
                              "id": "h",
                              "name": "Bottom",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": [Function],
                        "eleType": "input",
                        "mapTo": "legendSize",
                        "name": "Legend size",
                        "title": "Legend size",
                      },
                    ],
                  },
                  Object {
                    "editor": [Function],
                    "id": "chart_styles",
                    "mapTo": "chartStyles",
                    "name": "Chart styles",
                    "schemas": Array [
                      Object {
                        "component": [Function],
                        "eleType": "buttons",
                        "mapTo": "mode",
                        "name": "Mode",
                        "props": Object {
                          "defaultSelections": Array [
                            Object {
                              "id": "group",
                              "name": "Group",
                            },
                          ],
                          "options": Array [
                            Object {
                              "id": "group",
                              "name": "Group",
                            },
                            Object {
                              "id": "stack",
                              "name": "Stack",
                            },
                          ],
                        },
                      },
                      Object {
                        "component": [Function],
                        "eleType": "input",
                        "mapTo": "labelSize",
                        "name": "Label size",
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 0,
                        "eleType": "slider",
                        "mapTo": "rotateBarLabels",
                        "name": "Rotate bar labels",
                        "props": Object {
                          "max": 90,
                          "min": -90,
                          "showTicks": true,
                          "ticks": Array [
                            Object {
                              "label": "-90°",
                              "value": -90,
                            },
                            Object {
                              "label": "-45°",
                              "value": -45,
                            },
                            Object {
                              "label": "0°",
                              "value": 0,
                            },
                            Object {
                              "label": "45°",
                              "value": 45,
                            },
                            Object {
                              "label": "90°",
                              "value": 90,
                            },
                          ],
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 0.7,
                        "eleType": "slider",
                        "mapTo": "groupWidth",
                        "name": "Group width",
                        "props": Object {
                          "max": 1,
                          "step": 0.01,
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 0.97,
                        "eleType": "slider",
                        "mapTo": "barWidth",
                        "name": "Bar width",
                        "props": Object {
                          "max": 1,
                          "step": 0.01,
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 2,
                        "eleType": "slider",
                        "mapTo": "lineWidth",
                        "name": "Line width",
                        "props": Object {
                          "max": 10,
                        },
                      },
                      Object {
                        "component": [Function],
                        "defaultState": 70,
                        "eleType": "slider",
                        "mapTo": "fillOpacity",
                        "name": "Fill opacity",
                        "props": Object {
                          "max": 100,
                        },
                      },
                    ],
                  },
                  Object {
                    "editor": [Function],
                    "id": "color-theme",
                    "mapTo": "colorTheme",
                    "name": "Color theme",
                    "schemas": Array [],
                  },
                ],
              },
              Object {
                "editor": [Function],
                "id": "availability-panel",
                "mapTo": "availabilityConfig",
                "name": "Availability",
              },
            ],
          },
          "fillopacity": 70,
          "fulllabel": "Vertical bar",
          "groupwidth": 0.7,
          "icon": [Function],
          "icontype": "visBarVerticalStacked",
          "id": "bar",
          "label": "Vertical bar",
          "labelangle": 0,
          "legendposition": "v",
          "linewidth": 2,
          "mode": "group",
          "name": "bar",
          "orientation": "v",
          "selection": Object {
            "dataLoss": "nothing",
          },
          "seriesaxis": "yaxis",
          "showlegend": "show",
          "type": "bar",
          "visconfig": Object {
            "config": Object {
              "displaylogo": false,
              "responsive": true,
            },
            "isUniColor": false,
            "layout": Object {
              "height": 1180,
              "legend": Object {
                "orientation": "v",
                "traceorder": "normal",
              },
              "margin": Object {
                "b": 30,
                "l": 60,
                "pad": 0,
                "r": 30,
                "t": 50,
              },
              "showlegend": true,
            },
          },
        },
      }
    }
  >
    <EuiTitle
      size="xxs"
    >
      <h3
        className="euiTitle euiTitle--xxsmall"
      >
        Configuration
      </h3>
    </EuiTitle>
    <EuiSpacer
      size="s"
    >
      <div
        className="euiSpacer euiSpacer--s"
      />
    </EuiSpacer>
    <div
      className="panel_section"
    >
      <div
        style={
          Object {
            "display": "flex",
          }
        }
      >
        <EuiTitle
          className="panel_title"
          size="xxs"
        >
          <h3
            className="euiTitle euiTitle--xxsmall panel_title"
          >
            series
          </h3>
        </EuiTitle>
        <EuiToolTip
          anchorClassName="eui-textTruncate"
          content="Series is an aggregation function (mandatory). The argument of an aggregation must be a field."
          delay="regular"
          position="right"
        >
          <span
            className="euiToolTipAnchor eui-textTruncate"
            onKeyUp={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <EuiIcon
              className="info-icon"
              color="text"
              onBlur={[Function]}
              onFocus={[Function]}
              size="m"
              type="iInCircle"
            >
              <EuiIconEmpty
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                focusable="false"
                onBlur={[Function]}
                onFocus={[Function]}
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                  focusable="false"
                  height={16}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                />
              </EuiIconEmpty>
            </EuiIcon>
          </span>
        </EuiToolTip>
      </div>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        paddingSize="s"
      >
        <div
          className="euiPanel euiPanel--paddingSmall euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            className="field_text"
            size="s"
          >
            <div
              className="euiText euiText--small field_text"
            >
              <EuiLink
                onClick={[Function]}
                role="button"
                tabIndex={0}
              >
                <button
                  className="euiLink euiLink--primary"
                  disabled={false}
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                  type="button"
                >
                  delays
                </button>
              </EuiLink>
            </div>
          </EuiText>
          <EuiToolTip
            anchorClassName="eui-textTruncate"
            content="Series is an aggregation function (mandatory). The argument of an aggregation must be a field."
            delay="regular"
            position="right"
          >
            <span
              className="euiToolTipAnchor eui-textTruncate"
              onKeyUp={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
            >
              <EuiButtonIcon
                aria-label="clear-field"
                color="subdued"
                iconSize="s"
                iconType="cross"
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
              >
                <button
                  aria-label="clear-field"
                  className="euiButtonIcon euiButtonIcon--subdued euiButtonIcon--empty euiButtonIcon--xSmall"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  type="button"
                >
                  <EuiIcon
                    aria-hidden="true"
                    className="euiButtonIcon__icon"
                    color="inherit"
                    size="s"
                    type="cross"
                  >
                    <EuiIconEmpty
                      aria-hidden={true}
                      className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      />
                    </EuiIconEmpty>
                  </EuiIcon>
                </button>
              </EuiButtonIcon>
            </span>
          </EuiToolTip>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        grow={true}
      >
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            size="s"
          >
            <div
              className="euiText euiText--small"
            >
              Click to add
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="add-field"
            color="primary"
            iconSize="s"
            iconType="plusInCircle"
            onClick={[Function]}
          >
            <button
              aria-label="add-field"
              className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="plusInCircle"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="m"
      >
        <div
          className="euiSpacer euiSpacer--m"
        />
      </EuiSpacer>
    </div>
    <EuiSpacer
      size="s"
    >
      <div
        className="euiSpacer euiSpacer--s"
      />
    </EuiSpacer>
    <div
      className="panel_section"
    >
      <div
        style={
          Object {
            "display": "flex",
          }
        }
      >
        <EuiTitle
          className="panel_title"
          size="xxs"
        >
          <h3
            className="euiTitle euiTitle--xxsmall panel_title"
          >
            dimensions
          </h3>
        </EuiTitle>
        <EuiToolTip
          anchorClassName="eui-textTruncate"
          content="Dimensions are 'by' clauses. They are fields or expressions like scalar and aggregation functions. Besides, the span clause for a dimension can be used to split a specific field into buckets in the same interval, the stats then does the aggregation by these span buckets."
          delay="regular"
          position="right"
        >
          <span
            className="euiToolTipAnchor eui-textTruncate"
            onKeyUp={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <EuiIcon
              className="info-icon"
              color="text"
              onBlur={[Function]}
              onFocus={[Function]}
              size="m"
              type="iInCircle"
            >
              <EuiIconEmpty
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                focusable="false"
                onBlur={[Function]}
                onFocus={[Function]}
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                  focusable="false"
                  height={16}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                />
              </EuiIconEmpty>
            </EuiIcon>
          </span>
        </EuiToolTip>
      </div>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        paddingSize="s"
      >
        <div
          className="euiPanel euiPanel--paddingSmall euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            className="field_text"
            size="s"
          >
            <div
              className="euiText euiText--small field_text"
            >
              <EuiLink
                onClick={[Function]}
                role="button"
                tabIndex={0}
              >
                <button
                  className="euiLink euiLink--primary"
                  disabled={false}
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                  type="button"
                >
                   tags
                </button>
              </EuiLink>
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="clear-field"
            color="subdued"
            iconSize="s"
            iconType="cross"
            onClick={[Function]}
          >
            <button
              aria-label="clear-field"
              className="euiButtonIcon euiButtonIcon--subdued euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="cross"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        grow={true}
      >
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            size="s"
          >
            <div
              className="euiText euiText--small"
            >
              Click to add
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="add-field"
            color="primary"
            iconSize="s"
            iconType="plusInCircle"
            onClick={[Function]}
          >
            <button
              aria-label="add-field"
              className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="plusInCircle"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="m"
      >
        <div
          className="euiSpacer euiSpacer--m"
        />
      </EuiSpacer>
    </div>
    <EuiSpacer
      size="s"
    >
      <div
        className="euiSpacer euiSpacer--s"
      />
    </EuiSpacer>
    <div
      className="panel_section"
    >
      <div
        style={
          Object {
            "display": "flex",
          }
        }
      >
        <EuiTitle
          className="panel_title"
          size="xxs"
        >
          <h3
            className="euiTitle euiTitle--xxsmall panel_title"
          >
            breakdowns
          </h3>
        </EuiTitle>
        <EuiToolTip
          anchorClassName="eui-textTruncate"
          content="Defines how each series is broken down. Breakdowns are 'by' clauses that subdivide the existing series."
          delay="regular"
          position="right"
        >
          <span
            className="euiToolTipAnchor eui-textTruncate"
            onKeyUp={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <EuiIcon
              className="info-icon"
              color="text"
              onBlur={[Function]}
              onFocus={[Function]}
              size="m"
              type="iInCircle"
            >
              <EuiIconEmpty
                aria-hidden={true}
                className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                focusable="false"
                onBlur={[Function]}
                onFocus={[Function]}
                role="img"
                style={null}
              >
                <svg
                  aria-hidden={true}
                  className="euiIcon euiIcon--medium euiIcon--text euiIcon-isLoading info-icon"
                  focusable="false"
                  height={16}
                  onBlur={[Function]}
                  onFocus={[Function]}
                  role="img"
                  style={null}
                  viewBox="0 0 16 16"
                  width={16}
                  xmlns="http://www.w3.org/2000/svg"
                />
              </EuiIconEmpty>
            </EuiIcon>
          </span>
        </EuiToolTip>
      </div>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiSpacer
        size="s"
      >
        <div
          className="euiSpacer euiSpacer--s"
        />
      </EuiSpacer>
      <EuiPanel
        className="panelItem_button"
        grow={true}
      >
        <div
          className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow panelItem_button"
        >
          <EuiText
            size="s"
          >
            <div
              className="euiText euiText--small"
            >
              Click to add
            </div>
          </EuiText>
          <EuiButtonIcon
            aria-label="add-field"
            color="primary"
            iconSize="s"
            iconType="plusInCircle"
            onClick={[Function]}
          >
            <button
              aria-label="add-field"
              className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              <EuiIcon
                aria-hidden="true"
                className="euiButtonIcon__icon"
                color="inherit"
                size="s"
                type="plusInCircle"
              >
                <EuiIconEmpty
                  aria-hidden={true}
                  className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                  focusable="false"
                  role="img"
                  style={null}
                >
                  <svg
                    aria-hidden={true}
                    className="euiIcon euiIcon--small euiIcon--inherit euiIcon-isLoading euiButtonIcon__icon"
                    focusable="false"
                    height={16}
                    role="img"
                    style={null}
                    viewBox="0 0 16 16"
                    width={16}
                    xmlns="http://www.w3.org/2000/svg"
                  />
                </EuiIconEmpty>
              </EuiIcon>
            </button>
          </EuiButtonIcon>
        </div>
      </EuiPanel>
      <EuiSpacer
        size="m"
      >
        <div
          className="euiSpacer euiSpacer--m"
        />
      </EuiSpacer>
    </div>
    <EuiSpacer
      size="m"
    >
      <div
        className="euiSpacer euiSpacer--m"
      />
    </EuiSpacer>
    <EuiFlexItem
      grow={false}
    >
      <div
        className="euiFlexItem euiFlexItem--flexGrowZero"
      >
        <EuiButton
          data-test-subj="visualizeEditorRenderButton"
          iconType="play"
          onClick={[Function]}
          size="s"
        >
          <EuiButtonDisplay
            baseClassName="euiButton"
            data-test-subj="visualizeEditorRenderButton"
            disabled={false}
            element="button"
            iconType="play"
            isDisabled={false}
            onClick={[Function]}
            size="s"
            type="button"
          >
            <button
              className="euiButton euiButton--primary euiButton--small"
              data-test-subj="visualizeEditorRenderButton"
              disabled={false}
              onClick={[Function]}
              style={
                Object {
                  "minWidth": undefined,
                }
              }
              type="button"
            >
              <EuiButtonContent
                className="euiButton__content"
                iconSide="left"
                iconType="play"
                textProps={
                  Object {
                    "className": "euiButton__text",
                  }
                }
              >
                <span
                  className="euiButtonContent euiButton__content"
                >
                  <EuiIcon
                    className="euiButtonContent__icon"
                    color="inherit"
                    size="m"
                    type="play"
                  >
                    <EuiIconEmpty
                      aria-hidden={true}
                      className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                      focusable="false"
                      role="img"
                      style={null}
                    >
                      <svg
                        aria-hidden={true}
                        className="euiIcon euiIcon--medium euiIcon--inherit euiIcon-isLoading euiButtonContent__icon"
                        focusable="false"
                        height={16}
                        role="img"
                        style={null}
                        viewBox="0 0 16 16"
                        width={16}
                        xmlns="http://www.w3.org/2000/svg"
                      />
                    </EuiIconEmpty>
                  </EuiIcon>
                  <span
                    className="euiButton__text"
                  >
                    Update chart
                  </span>
                </span>
              </EuiButtonContent>
            </button>
          </EuiButtonDisplay>
        </EuiButton>
      </div>
    </EuiFlexItem>
  </DataConfigPanelItem>
</Provider>
`;
